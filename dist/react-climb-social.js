!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="/",e(0)}([function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),i=r(o),s=n(7),u=r(s);if(window){window.Climb=window.Climb||{};for(var c=document.querySelectorAll(".climb-wall"),h=0;h<c.length;++h){var a=c[h],p=a.dataset.collectionId,f=a.dataset.limit;i["default"].render(i["default"].createElement(u["default"],{collectionId:p,limit:f}),a)}}e["default"]=u["default"],t.exports=e["default"]},function(t,e){t.exports=React},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(t,e,n){for(var r=!0;r;){var o=t,i=e,s=n;u=h=c=void 0,r=!1,null===o&&(o=Function.prototype);var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var c=u.get;return void 0===c?void 0:c.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return void 0;t=h,e=i,n=s,r=!0}},c=n(1),h=r(c),a=function(t){function e(){o(this,e),u(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return i(e,t),s(e,[{key:"render",value:function(){return h["default"].createElement("a",{className:"climb__tile__author",href:this.props.link},h["default"].createElement("img",{src:this.props.picture,alt:"Profile pic of "+this.props.name}),h["default"].createElement("h4",{className:"climb__tile__author__username"},this.props.username),h["default"].createElement("h4",{className:"climb__tile__author__followers"},this.props.followers_count))}}]),e}(h["default"].Component);a.propTypes={},e["default"]=a,t.exports=e["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(t,e,n){for(var r=!0;r;){var o=t,i=e,s=n;u=h=c=void 0,r=!1,null===o&&(o=Function.prototype);var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var c=u.get;return void 0===c?void 0:c.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return void 0;t=h,e=i,n=s,r=!0}},c=n(1),h=r(c),a=function(t){function e(){o(this,e),u(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return i(e,t),s(e,[{key:"render",value:function(){return h["default"].createElement("img",{className:"climb__tile__image",src:this.props.src,"data-width":this.props.width,"data-height":this.props.height})}}]),e}(h["default"].Component);a.propTypes={src:h["default"].PropTypes.string.isRequired,width:h["default"].PropTypes.number,height:h["default"].PropTypes.number},e["default"]=a,t.exports=e["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(t,e,n){for(var r=!0;r;){var o=t,i=e,s=n;u=h=c=void 0,r=!1,null===o&&(o=Function.prototype);var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var c=u.get;return void 0===c?void 0:c.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return void 0;t=h,e=i,n=s,r=!0}},c=n(1),h=r(c),a=function(t){function e(){o(this,e),u(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return i(e,t),s(e,[{key:"render",value:function(){return h["default"].createElement("ul",null)}}]),e}(h["default"].Component);a.propTypes={body:h["default"].PropTypes.string.isRequired},e["default"]=a,t.exports=e["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(t,e,n){for(var r=!0;r;){var o=t,i=e,s=n;u=h=c=void 0,r=!1,null===o&&(o=Function.prototype);var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var c=u.get;return void 0===c?void 0:c.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return void 0;t=h,e=i,n=s,r=!0}},c=n(1),h=r(c),a=function(t){function e(){o(this,e),u(Object.getPrototypeOf(e.prototype),"constructor",this).apply(this,arguments)}return i(e,t),s(e,[{key:"render",value:function(){return h["default"].createElement("div",{className:"climb__tile__message",dangerouslySetInnerHTML:{__html:this.props.body}})}}]),e}(h["default"].Component);a.propTypes={body:h["default"].PropTypes.string.isRequired},e["default"]=a,t.exports=e["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(t,e,n){for(var r=!0;r;){var o=t,i=e,s=n;u=h=c=void 0,r=!1,null===o&&(o=Function.prototype);var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var c=u.get;return void 0===c?void 0:c.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return void 0;t=h,e=i,n=s,r=!0}},c=n(1),h=r(c),a=n(3),p=r(a),f=n(5),l=r(f),d=n(2),v=r(d),b=n(4),_=r(b),m=function(t){function e(t){o(this,e),u(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t),this.createImage.bind(this),this.createMessage.bind(this),this.createInteraction.bind(this),this.createClassString.bind(this)}return i(e,t),s(e,[{key:"createImage",value:function(){if(null!==this.props.image){var t=this.props.image,e=t.url,n=t.width,r=t.height;return h["default"].createElement(p["default"],{src:e,width:n,height:r})}return null}},{key:"createMessage",value:function(){return this.props.message?h["default"].createElement(l["default"],{body:this.props.message}):null}},{key:"createInteraction",value:function(){return this.props.link?h["default"].createElement(_["default"],{body:this.props}):null}},{key:"createClassString",value:function(){var t="climb__tile climb__tile--"+this.props.source_type;return this.props.image&&(t+=" climb__tile--has-media climb__tile--has-image"),this.props.video_url&&(t+=" climb__tile--has-media climb__tile--has-video"),t}},{key:"render",value:function(){var t=this.createImage(),e=this.createMessage(),n=this.createInteraction(),r=this.createClassString(),o=this.props.author;return h["default"].createElement("div",{className:r},h["default"].createElement("a",{href:this.props.link},t),h["default"].createElement("div",{className:"climb__tile__content"},e),h["default"].createElement(v["default"],o),h["default"].createElement("div",{className:"climb__tile__interaction"},n))}}]),e}(h["default"].Component);m.propTypes={link:h["default"].PropTypes.string.isRequired,source_type:h["default"].PropTypes.string.isRequired,timestamp:h["default"].PropTypes.number.isRequired,author:h["default"].PropTypes.shape({username:h["default"].PropTypes.string.isRequired,picture:h["default"].PropTypes.string.isRequired,link:h["default"].PropTypes.string.isRequired}),message:h["default"].PropTypes.string,video_src:h["default"].PropTypes.string,image:h["default"].PropTypes.shape({url:h["default"].PropTypes.string.isRequired,width:h["default"].PropTypes.number.isRequired,height:h["default"].PropTypes.number.isRequired})},e["default"]=m,t.exports=e["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var u=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},c=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),h=function(t,e,n){for(var r=!0;r;){var o=t,i=e,s=n;u=h=c=void 0,r=!1,null===o&&(o=Function.prototype);var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var c=u.get;return void 0===c?void 0:c.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return void 0;t=h,e=i,n=s,r=!0}},a=n(1),p=r(a),f=n(8),l=r(f),d=n(6),v=r(d),b=function(t){function e(t){i(this,e),h(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t),this.state={items:[]}}return s(e,t),c(e,[{key:"init",value:function(){var t=this;this.props.collectionId&&l["default"].getStream(this.props.collectionId).subscribe(function(e){var n=30;t.setState({items:e.splice(0,n)})})}},{key:"componentDidMount",value:function(){this.init()}},{key:"componentDidUpdate",value:function(){var t=void 0;(t=window.Climb&&window.Climb.onUpdate?window.Climb.onUpdate:function(){})()}},{key:"render",value:function(){var t=[];return this.state.items.map(function(e){var n=e.id,r=o(e,["id"]);t.push(p["default"].createElement(v["default"],u({key:n},r)))}),p["default"].createElement("div",{className:"climb__wall"},t)}}]),e}(p["default"].Component);b.displayName="Wall",b.propTypes={collectionId:p["default"].PropTypes.string.isRequired,limit:p["default"].PropTypes.number},e["default"]=b,t.exports=e["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var o=n(10),i=r(o),s=n(9),u=r(s),c=function(t){var e=5e3,n=i["default"].Observable.just("http://app.climb.social/api/v1/collections/"+t),r=i["default"].Observable.interval(e).startWith(null),o=r.combineLatest(n,function(t,e){return e}).flatMap(function(t){var e=""+t;return i["default"].Observable.fromPromise(u["default"](e).then(function(t){return t.json()}))});return o},h={getStream:c};e["default"]=h,t.exports=e["default"]},function(t,e,n){var r,o,i;!function(n,s){o=[e,t],r=s,i="function"==typeof r?r.apply(e,o):r,!(void 0!==i&&(t.exports=i))}(this,function(t,e){"use strict";function n(){return"jsonp_"+Date.now()+"_"+Math.ceil(1e5*Math.random())}function r(t){try{delete window[t]}catch(e){window[t]=void 0}}function o(t){var e=document.getElementById(t);document.getElementsByTagName("head")[0].removeChild(e)}var i={timeout:5e3,jsonpCallback:"callback"},s=function(t){var e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=null!=e.timeout?e.timeout:i.timeout,u=null!=e.jsonpCallback?e.jsonpCallback:i.jsonpCallback,c=void 0;return new Promise(function(e,i){var h=n();window[h]=function(t){e({ok:!0,json:function(){return Promise.resolve(t)}}),c&&clearTimeout(c),o(u+"_"+h),r(h)},t+=-1===t.indexOf("?")?"?":"&";var a=document.createElement("script");a.setAttribute("src",t+u+"="+h),a.id=u+"_"+h,document.getElementsByTagName("head")[0].appendChild(a),c=setTimeout(function(){i(new Error("JSONP request to "+t+" timed out")),r(h),o(u+"_"+h)},s)})};e.exports=s})},function(t,e,n){var r;(function(t,o,i){(function(s){function u(t){for(var e=[],n=0,r=t.length;r>n;n++)e.push(t[n]);return e}function c(t){return function(){try{return t.apply(this,arguments)}catch(e){return Xt.e=e,Xt}}}function h(t){throw t}function a(t,e){if(Zt&&e.stack&&"object"==typeof t&&null!==t&&t.stack&&-1===t.stack.indexOf(re)){for(var n=[],r=e;r;r=r.source)r.stack&&n.unshift(r.stack);n.unshift(t.stack);var o=n.join("\n"+re+"\n");t.stack=p(o)}}function p(t){for(var e=t.split("\n"),n=[],r=0,o=e.length;o>r;r++){var i=e[r];f(i)||l(i)||!i||n.push(i)}return n.join("\n")}function f(t){var e=v(t);if(!e)return!1;var n=e[0],r=e[1];return n===ee&&r>=ne&&os>=r}function l(t){return-1!==t.indexOf("(module.js:")||-1!==t.indexOf("(node.js:")}function d(){if(Zt)try{throw new Error}catch(t){var e=t.stack.split("\n"),n=e[0].indexOf("@")>0?e[1]:e[2],r=v(n);if(!r)return;return ee=r[0],r[1]}}function v(t){var e=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(t);if(e)return[e[1],Number(e[2])];var n=/at ([^ ]+):(\d+):(?:\d+)$/.exec(t);if(n)return[n[1],Number(n[2])];var r=/.*@(.+):(\d+)$/.exec(t);return r?[r[1],Number(r[2])]:void 0}function b(t){var e=[];if(!rt(t))return e;Me.nonEnumArgs&&t.length&&Le(t)&&(t=We.call(t));var n=Me.enumPrototypes&&"function"==typeof t,r=Me.enumErrorProps&&(t===ke||t instanceof Error);for(var o in t)n&&"prototype"==o||r&&("message"==o||"name"==o)||e.push(o);if(Me.nonEnumShadows&&t!==qe){var i=t.constructor,s=-1,u=_e;if(t===(i&&i.prototype))var c=t===Te?De:t===ke?Ee:Se.call(t),h=Re[c];for(;++s<u;)o=be[s],h&&h[o]||!Ae.call(t,o)||e.push(o)}return e}function _(t,e,n){for(var r=-1,o=n(t),i=o.length;++r<i;){var s=o[r];if(e(t[s],s,t)===!1)break}return t}function m(t,e){return _(t,e,b)}function y(t){return"function"!=typeof t.toString&&"string"==typeof(t+"")}function w(t,e,n,r){if(t===e)return 0!==t||1/t==1/e;var o=typeof t,i=typeof e;if(t===t&&(null==t||null==e||"function"!=o&&"object"!=o&&"function"!=i&&"object"!=i))return!1;var s=Se.call(t),u=Se.call(e);if(s==me&&(s=Ne),u==me&&(u=Ne),s!=u)return!1;switch(s){case we:case ge:return+t==+e;case xe:return t!=+t?e!=+e:0==t?1/t==1/e:t==+e;case Oe:case De:return t==String(e)}var c=s==ye;if(!c){if(s!=Ne||!Me.nodeClass&&(y(t)||y(e)))return!1;var h=!Me.argsObject&&Le(t)?Object:t.constructor,a=!Me.argsObject&&Le(e)?Object:e.constructor;if(!(h==a||Ae.call(t,"constructor")&&Ae.call(e,"constructor")||Gt(h)&&h instanceof h&&Gt(a)&&a instanceof a||!("constructor"in t&&"constructor"in e)))return!1}n||(n=[]),r||(r=[]);for(var p=n.length;p--;)if(n[p]==t)return r[p]==e;var f=0,l=!0;if(n.push(t),r.push(e),c){if(p=t.length,f=e.length,l=f==p)for(;f--;){var d=e[f];if(!(l=w(t[f],d,n,r)))break}}else m(e,function(e,o,i){return Ae.call(i,o)?(f++,l=Ae.call(t,o)&&w(t[o],e,n,r)):void 0}),l&&m(t,function(t,e,n){return Ae.call(n,e)?l=--f>-1:void 0});return n.pop(),r.pop(),l}function g(t,e){for(var n=new Array(t),r=0;t>r;r++)n[r]=e();return n}function E(t,e){this.id=t,this.value=e}function C(t,e){this.scheduler=t,this.disposable=e,this.isDisposed=!1}function x(t,e){e.isDisposed||(e.isDisposed=!0,e.disposable.dispose())}function N(t){this._s=t,this.isDisposed=!1}function O(t){this._s=t}function D(t){this._s=t,this._l=t.length,this._i=0}function S(t){this._a=t}function A(t){this._a=t,this._l=T(t),this._i=0}function j(t){return"number"==typeof t&&zt.isFinite(t)}function k(t){var e,n=t[ae];if(!n&&"string"==typeof t)return e=new O(t),e[ae]();if(!n&&t.length!==s)return e=new S(t),e[ae]();if(!n)throw new TypeError("Object is not iterable");return t[ae]()}function q(t){var e=+t;return 0===e?e:isNaN(e)?e:0>e?-1:1}function T(t){var e=+t.length;return isNaN(e)?0:0!==e&&j(e)?(e=q(e)*Math.floor(Math.abs(e)),0>=e?0:e>sr?sr:e):e}function P(t,e){this.observer=t,this.parent=e}function F(t,e){return hn(t)||(t=bn),new cr(e,t)}function R(t,e){this.observer=t,this.parent=e}function M(t,e){this.observer=t,this.parent=e}function L(t,e){return t.amb(e)}function I(){return!1}function W(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return e}function I(){return!1}function W(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return e}function I(){return!1}function z(){return[]}function I(){return!1}function z(){return[]}function W(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return e}function B(t){return function(e){return t.subscribe(e)}}function V(t){return t.toArray()}function U(t){return t.length>0}function H(t,e,n){var r=ve(e,n,3);return t.map(function(e,n){var o=r(e,n,t);return $t(o)&&(o=Xn(o)),(le(o)||fe(o))&&(o=ur(o)),o}).concatAll()}function K(t,e,n){for(var r=0,o=t.length;o>r;r++)if(n(t[r],e))return r;return-1}function J(t){this.comparer=t,this.set=[]}function Q(t,e){return function(n){for(var r=n,o=0;e>o;o++){var i=r[t[o]];if("undefined"==typeof i)return s;r=i}return r}}function $(t){if(0===t.length)throw new oe;return t[0]}function G(t,e,n,r){var o=ve(e,n,3);return new Xi(function(e){return t.subscribe(new Ko(e,t,o,r))},t)}function X(t){return t?Ln.isObservable(t)?t:$t(t)?Ln.fromPromise(t):nt(t)||et(t)?ei.call(this,t):Gt(t)?tt.call(this,t):le(t)||fe(t)?Y.call(this,t):rt(t)?Z.call(this,t):t:t}function Y(t){return Ln.from(t).flatMap(X).toArray()}function Z(t){function e(t,e){n[e]=s,o.push(t.map(function(t){n[e]=t}))}for(var n=new t.constructor,r=Object.keys(t),o=[],i=0,u=r.length;u>i;i++){var c=r[i],h=X.call(this,t[c]);h&&Ln.isObservable(h)?e(h,c):n[c]=t[c]}return Ln.forkJoin.apply(Ln,o).map(function(){return n})}function tt(t){var e=this;return new Xi(function(n){t.call(e,function(){var t=arguments[0],e=arguments[1];if(t)return n.onError(t);if(arguments.length>2){for(var r=[],o=1,i=arguments.length;i>o;o++)r.push(arguments[o]);e=r}n.onNext(e),n.onCompleted()})})}function et(t){return Gt(t.next)&&Gt(t["throw"])}function nt(t){var e=t.constructor;return e?"GeneratorFunction"===e.name||"GeneratorFunction"===e.displayName?!0:et(e.prototype):!1}function rt(t){return Object==t.constructor}function ot(t,e,n,r){var o=new ns;return r.push(it(o,e,n)),t.apply(e,r),o.asObservable()}function it(t,e,n){return function(){for(var r=arguments.length,o=new Array(r),i=0;r>i;i++)o[i]=arguments[i];if(Gt(n)){if(o=Yt(n).apply(e,o),o===Xt)return t.onError(o.e);t.onNext(o)}else o.length<=1?t.onNext(o[0]):t.onNext(o);t.onCompleted()}}function st(t,e,n,r){var o=new ns;return r.push(ut(o,e,n)),t.apply(e,r),o.asObservable()}function ut(t,e,n){return function(){var r=arguments[0];if(r)return t.onError(r);for(var o=arguments.length,i=[],s=1;o>s;s++)i[s-1]=arguments[s];if(Gt(n)){var i=Yt(n).apply(e,i);if(i===Xt)return t.onError(i.e);t.onNext(i)}else i.length<=1?t.onNext(i[0]):t.onNext(i);t.onCompleted()}}function ct(t,e,n){this._e=t,this._n=e,this._fn=n,this._e.addEventListener(this._n,this._fn,!1),this.isDisposed=!1}function ht(t,e,n){var r=new Ke,o=Object.prototype.toString.call(t);if("[object NodeList]"===o||"[object HTMLCollection]"===o)for(var i=0,s=t.length;s>i;i++)r.add(ht(t.item(i),e,n));else t&&r.add(new ct(t,e,n));return r}function at(t,e){return function(){var n=arguments[0];return Gt(e)&&(n=Yt(e).apply(null,arguments),n===Xt)?t.onError(n.e):void t.onNext(n)}}function pt(t,e,n){return new Xi(function(r){function o(t,e){if(h[e]=t,s[e]=!0,u||(u=s.every(Ut))){if(i)return r.onError(i);var o=Yt(n).apply(null,h);if(o===Xt)return r.onError(o.e);r.onNext(o)}c&&h[1]&&r.onCompleted()}var i,s=[!1,!1],u=!1,c=!1,h=new Array(2);return new nn(t.subscribe(function(t){o(t,0)},function(t){h[1]?r.onError(t):i=t},function(){c=!0,h[1]&&r.onCompleted()}),e.subscribe(function(t){o(t,1)},function(t){r.onError(t)},function(){c=!0,o(!0,1)}))},t)}function V(t){return t.toArray()}function ft(t,e){return t.groupJoin(this,e,rr,function(t,e){return e})}function lt(t){var e=this;return new Xi(function(n){var r=new es,o=new Ke,i=new on(o);return n.onNext(Ve(r,i)),o.add(e.subscribe(function(t){r.onNext(t)},function(t){r.onError(t),n.onError(t)},function(){r.onCompleted(),n.onCompleted()})),$t(t)&&(t=Xn(t)),o.add(t.subscribe(function(t){r.onCompleted(),r=new es,n.onNext(Ve(r,i))},function(t){r.onError(t),n.onError(t)},function(){r.onCompleted(),n.onCompleted()})),i},e)}function dt(t){var e=this;return new Xi(function(n){function r(){var e;try{e=t()}catch(i){return void n.onError(i)}$t(e)&&(e=Xn(e));var c=new tn;o.setDisposable(c),c.setDisposable(e.take(1).subscribe(Vt,function(t){u.onError(t),n.onError(t)},function(){u.onCompleted(),u=new es,n.onNext(Ve(u,s)),r()}))}var o=new en,i=new Ke(o),s=new on(i),u=new es;return n.onNext(Ve(u,s)),i.add(e.subscribe(function(t){u.onNext(t)},function(t){u.onError(t),n.onError(t)},function(){u.onCompleted(),n.onCompleted()})),r(),s},e)}function vt(t,e){return new bi(t,e)}function bt(t){this.patterns=t}function _t(t,e){this.expression=t,this.selector=e}function mt(t,e,n){var r=t.get(e);if(!r){var o=new wi(e,n);return t.set(e,o),o}return r}function yt(t,e,n){this.joinObserverArray=t,this.onNext=e,this.onCompleted=n,this.joinObservers=new yi;for(var r=0,o=this.joinObserverArray.length;o>r;r++){var i=this.joinObserverArray[r];this.joinObservers.set(i,i)}}function wt(t,e){return new gi(t,e)}function gt(t,e,n){return new Xi(function(r){var o=t,i=cn(e);return n.scheduleRecursiveFuture(0,o,function(t,e){if(i>0){var s=n.now();o+=i,s>=o&&(o=s+i)}r.onNext(t),e(t+1,new Date(o))})})}function Et(t,e,n){return t===e?new Xi(function(t){return n.schedulePeriodic(0,e,function(e){return t.onNext(e),e+1})}):tr(function(){return gt(new Date(n.now()+t),e,n)})}function Ct(t,e,n){return new Xi(function(r){var o,i=!1,s=new en,u=null,c=[],h=!1;return o=t.materialize().timestamp(n).subscribe(function(t){var o,a;"E"===t.value.kind?(c=[],c.push(t),u=t.value.error,a=!h):(c.push({value:t.value,timestamp:t.timestamp+e}),a=!i,i=!0),a&&(null!==u?r.onError(u):(o=new tn,s.setDisposable(o),o.setDisposable(n.scheduleRecursiveFuture(null,e,function(t,e){var o,s,a,p;if(null===u){h=!0;do a=null,c.length>0&&c[0].timestamp-n.now()<=0&&(a=c.shift().value),null!==a&&a.accept(r);while(null!==a);p=!1,s=0,c.length>0?(p=!0,s=Math.max(0,c[0].timestamp-n.now())):i=!1,o=u,h=!1,null!==o?r.onError(o):p&&e(null,s)}}))))}),new nn(o,s)},t)}function xt(t,e,n){return tr(function(){return Ct(t,e-n.now(),n)})}function Nt(t,e,n){var r,o;return Gt(e)?o=e:(r=e,o=n),new Xi(function(e){function n(){c.setDisposable(t.subscribe(function(t){var n=Yt(o)(t);if(n===Xt)return e.onError(n.e);var r=new tn;s.add(r),r.setDisposable(n.subscribe(function(){e.onNext(t),s.remove(r),i()},function(t){e.onError(t)},function(){e.onNext(t),s.remove(r),i()}))},function(t){e.onError(t)},function(){u=!0,c.dispose(),i()}))}function i(){u&&0===s.length&&e.onCompleted()}var s=new Ke,u=!1,c=new en;return r?c.setDisposable(r.subscribe(n,function(t){e.onError(t)},n)):n(),new nn(c,s)},this)}function Ot(t,e){return new Xi(function(n){var r,o=!1,i=new en,s=0,u=t.subscribe(function(t){var u=Yt(e)(t);if(u===Xt)return n.onError(u.e);$t(u)&&(u=Xn(u)),o=!0,r=t,s++;var c=s,h=new tn;i.setDisposable(h),h.setDisposable(u.subscribe(function(){o&&s===c&&n.onNext(r),o=!1,h.dispose()},function(t){n.onError(t)},function(){o&&s===c&&n.onNext(r),o=!1,h.dispose()}))},function(t){i.dispose(),n.onError(t),o=!1,s++},function(){i.dispose(),o&&n.onNext(r),n.onCompleted(),o=!1,s++});return new nn(u,i)},t)}function V(t){return t.toArray()}function V(t){return t.toArray()}function Dt(t,e){return new Xi(function(n){function r(){s&&(s=!1,n.onNext(o)),i&&n.onCompleted()}var o,i=!1,s=!1,u=new tn;return u.setDisposable(t.subscribe(function(t){s=!0,o=t},function(t){n.onError(t)},function(){i=!0,u.dispose()})),new nn(u,e.subscribe(r,function(t){n.onError(t)},r))},t)}function St(t,e,n,r){return Gt(e)&&(r=n,n=e,e=lr()),r||(r=wr(new Ai)),new Xi(function(o){function i(t){function e(){return p=n===a}var n=a,i=new tn;c.setDisposable(i),i.setDisposable(t.subscribe(function(){e()&&u.setDisposable(r.subscribe(o)),i.dispose()},function(t){e()&&o.onError(t)},function(){e()&&u.setDisposable(r.subscribe(o))}))}function s(){var t=!p;return t&&a++,t}var u=new en,c=new en,h=new tn;u.setDisposable(h);var a=0,p=!1;return i(e),h.setDisposable(t.subscribe(function(t){if(s()){o.onNext(t);var e=Yt(n)(t);if(e===Xt)return o.onError(e.e);i($t(e)?Xn(e):e)}},function(t){s()&&o.onError(t)},function(){s()&&o.onCompleted()})),new nn(u,c)},t)}function At(t,e,n,r){return hn(n)&&(r=n,n=wr(new Ai)),n instanceof Error&&(n=wr(n)),hn(r)||(r=gn),new Xi(function(o){function i(){var t=s;a.setDisposable(r.scheduleFuture(null,e,function(){h=s===t,h&&($t(n)&&(n=Xn(n)),c.setDisposable(n.subscribe(o)))}))}var s=0,u=new tn,c=new en,h=!1,a=new en;return c.setDisposable(u),i(),u.setDisposable(t.subscribe(function(t){h||(s++,o.onNext(t),i())},function(t){h||(s++,o.onError(t))},function(){h||(s++,o.onCompleted())})),new nn(c,a)},t)}function jt(t){return{"@@transducer/init":function(){return t},"@@transducer/step":function(t,e){return t.onNext(e)},"@@transducer/result":function(t){return t.onCompleted()}}}function kt(t){this.predicate=t}function qt(t){this.predicate=t}function Tt(t,e){var n=this;this.scheduler=t,this.messages=e,this.subscriptions=[],this.observers=[];for(var r=0,o=this.messages.length;o>r;r++){var i=this.messages[r],s=i.value;!function(e){t.scheduleAbsolute(null,i.time,function(){for(var t=n.observers.slice(0),r=0,o=t.length;o>r;r++)e.accept(t[r]);return Ge})}(s)}}var Pt={"function":!0,object:!0},Ft=Pt[typeof e]&&e&&!e.nodeType&&e,Rt=Pt[typeof self]&&self.Object&&self,Mt=Pt[typeof window]&&window&&window.Object&&window,Lt=Pt[typeof t]&&t&&!t.nodeType&&t,It=Lt&&Lt.exports===Ft&&Ft,Wt=Ft&&Lt&&"object"==typeof o&&o&&o.Object&&o,zt=zt=Wt||Mt!==(this&&this.window)&&Mt||Rt||this,Bt={internals:{},config:{Promise:zt.Promise},helpers:{}},Vt=Bt.helpers.noop=function(){},Ut=Bt.helpers.identity=function(t){return t},Ht=Bt.helpers.defaultNow=Date.now,Kt=Bt.helpers.defaultComparer=function(t,e){return Ie(t,e)},Jt=Bt.helpers.defaultSubComparer=function(t,e){return t>e?1:e>t?-1:0},Qt=(Bt.helpers.defaultKeySerializer=function(t){return t.toString()},Bt.helpers.defaultError=function(t){throw t}),$t=Bt.helpers.isPromise=function(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then},Gt=Bt.helpers.isFunction=function(){var t=function(t){return"function"==typeof t||!1};return t(/x/)&&(t=function(t){return"function"==typeof t&&"[object Function]"==Se.call(t)}),t}(),Xt={e:{}},Yt=Bt.internals.tryCatch=function(t){if(!Gt(t))throw new TypeError("fn must be a function");return c(t)};Bt.config.longStackSupport=!1;var Zt=!1,te=Yt(function(){throw new Error})();Zt=!!te.e&&!!te.e.stack;var ee,ne=d(),re="From previous event:",oe=Bt.EmptyError=function(){this.message="Sequence contains no elements.",this.name="EmptyError",Error.call(this)};oe.prototype=Object.create(Error.prototype);var ie=Bt.ObjectDisposedError=function(){this.message="Object has been disposed",this.name="ObjectDisposedError",Error.call(this)};ie.prototype=Object.create(Error.prototype);var se=Bt.ArgumentOutOfRangeError=function(){this.message="Argument out of range",this.name="ArgumentOutOfRangeError",Error.call(this)};se.prototype=Object.create(Error.prototype);var ue=Bt.NotSupportedError=function(t){this.message=t||"This operation is not supported",this.name="NotSupportedError",Error.call(this)};ue.prototype=Object.create(Error.prototype);var ce=Bt.NotImplementedError=function(t){this.message=t||"This operation is not implemented",this.name="NotImplementedError",Error.call(this)};ce.prototype=Object.create(Error.prototype);var he=Bt.helpers.notImplemented=function(){throw new ce},ae=(Bt.helpers.notSupported=function(){throw new ue},"function"==typeof Symbol&&Symbol.iterator||"_es6shim_iterator_");zt.Set&&"function"==typeof(new zt.Set)["@@iterator"]&&(ae="@@iterator");var pe=Bt.doneEnumerator={done:!0,value:s},fe=Bt.helpers.isIterable=function(t){return t[ae]!==s},le=Bt.helpers.isArrayLike=function(t){return t&&t.length!==s};Bt.helpers.iterator=ae;var de,ve=Bt.internals.bindCallback=function(t,e,n){if("undefined"==typeof e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}},be=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],_e=be.length,me="[object Arguments]",ye="[object Array]",we="[object Boolean]",ge="[object Date]",Ee="[object Error]",Ce="[object Function]",xe="[object Number]",Ne="[object Object]",Oe="[object RegExp]",De="[object String]",Se=Object.prototype.toString,Ae=Object.prototype.hasOwnProperty,je=Se.call(arguments)==me,ke=Error.prototype,qe=Object.prototype,Te=String.prototype,Pe=qe.propertyIsEnumerable;try{de=!(Se.call(document)==Ne&&!({toString:0}+""))}catch(Fe){de=!0}var Re={};Re[ye]=Re[ge]=Re[xe]={constructor:!0,toLocaleString:!0,toString:!0,valueOf:!0},Re[we]=Re[De]={constructor:!0,toString:!0,valueOf:!0},Re[Ee]=Re[Ce]=Re[Oe]={constructor:!0,toString:!0},Re[Ne]={constructor:!0};var Me={};!function(){var t=function(){this.x=1},e=[];t.prototype={valueOf:1,y:1};for(var n in new t)e.push(n);for(n in arguments);Me.enumErrorProps=Pe.call(ke,"message")||Pe.call(ke,"name"),Me.enumPrototypes=Pe.call(t,"prototype"),Me.nonEnumArgs=0!=n,Me.nonEnumShadows=!/valueOf/.test(e)}(1);var rt=Bt.internals.isObject=function(t){var e=typeof t;return t&&("function"==e||"object"==e)||!1},Le=function(t){return t&&"object"==typeof t?Se.call(t)==me:!1};je||(Le=function(t){return t&&"object"==typeof t?Ae.call(t,"callee"):!1});var Ie=Bt.internals.isEqual=function(t,e){return w(t,e,[],[])},We=({}.hasOwnProperty,
Array.prototype.slice),ze=Bt.internals.inherits=function(t,e){function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n},Be=Bt.internals.addProperties=function(t){for(var e=[],n=1,r=arguments.length;r>n;n++)e.push(arguments[n]);for(var o=0,i=e.length;i>o;o++){var s=e[o];for(var u in s)t[u]=s[u]}},Ve=Bt.internals.addRef=function(t,e){return new Xi(function(n){return new nn(e.getDisposable(),t.subscribe(n))})};E.prototype.compareTo=function(t){var e=this.value.compareTo(t.value);return 0===e&&(e=this.id-t.id),e};var Ue=Bt.internals.PriorityQueue=function(t){this.items=new Array(t),this.length=0},He=Ue.prototype;He.isHigherPriority=function(t,e){return this.items[t].compareTo(this.items[e])<0},He.percolate=function(t){if(!(t>=this.length||0>t)){var e=t-1>>1;if(!(0>e||e===t)&&this.isHigherPriority(t,e)){var n=this.items[t];this.items[t]=this.items[e],this.items[e]=n,this.percolate(e)}}},He.heapify=function(t){if(+t||(t=0),!(t>=this.length||0>t)){var e=2*t+1,n=2*t+2,r=t;if(e<this.length&&this.isHigherPriority(e,r)&&(r=e),n<this.length&&this.isHigherPriority(n,r)&&(r=n),r!==t){var o=this.items[t];this.items[t]=this.items[r],this.items[r]=o,this.heapify(r)}}},He.peek=function(){return this.items[0].value},He.removeAt=function(t){this.items[t]=this.items[--this.length],this.items[this.length]=s,this.heapify()},He.dequeue=function(){var t=this.peek();return this.removeAt(0),t},He.enqueue=function(t){var e=this.length++;this.items[e]=new E(Ue.count++,t),this.percolate(e)},He.remove=function(t){for(var e=0;e<this.length;e++)if(this.items[e].value===t)return this.removeAt(e),!0;return!1},Ue.count=0;var Ke=Bt.CompositeDisposable=function(){var t,e,n=[];if(Array.isArray(arguments[0]))n=arguments[0],e=n.length;else for(e=arguments.length,n=new Array(e),t=0;e>t;t++)n[t]=arguments[t];this.disposables=n,this.isDisposed=!1,this.length=n.length},Je=Ke.prototype;Je.add=function(t){this.isDisposed?t.dispose():(this.disposables.push(t),this.length++)},Je.remove=function(t){var e=!1;if(!this.isDisposed){var n=this.disposables.indexOf(t);-1!==n&&(e=!0,this.disposables.splice(n,1),this.length--,t.dispose())}return e},Je.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;for(var t=this.disposables.length,e=new Array(t),n=0;t>n;n++)e[n]=this.disposables[n];for(this.disposables=[],this.length=0,n=0;t>n;n++)e[n].dispose()}};var Qe=Bt.Disposable=function(t){this.isDisposed=!1,this.action=t||Vt};Qe.prototype.dispose=function(){this.isDisposed||(this.action(),this.isDisposed=!0)};var $e=Qe.create=function(t){return new Qe(t)},Ge=Qe.empty={dispose:Vt},Xe=Qe.isDisposable=function(t){return t&&Gt(t.dispose)},Ye=Qe.checkDisposed=function(t){if(t.isDisposed)throw new ie},Ze=Qe._fixup=function(t){return Xe(t)?t:Ge},tn=Bt.SingleAssignmentDisposable=function(){this.isDisposed=!1,this.current=null};tn.prototype.getDisposable=function(){return this.current},tn.prototype.setDisposable=function(t){if(this.current)throw new Error("Disposable has already been assigned");var e=this.isDisposed;!e&&(this.current=t),e&&t&&t.dispose()},tn.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;var t=this.current;this.current=null,t&&t.dispose()}};var en=Bt.SerialDisposable=function(){this.isDisposed=!1,this.current=null};en.prototype.getDisposable=function(){return this.current},en.prototype.setDisposable=function(t){var e=this.isDisposed;if(!e){var n=this.current;this.current=t}n&&n.dispose(),e&&t&&t.dispose()},en.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;var t=this.current;this.current=null}t&&t.dispose()};var nn=Bt.BinaryDisposable=function(t,e){this._first=t,this._second=e,this.isDisposed=!1};nn.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;var t=this._first;this._first=null,t&&t.dispose();var e=this._second;this._second=null,e&&e.dispose()}};var rn=Bt.NAryDisposable=function(t){this._disposables=t,this.isDisposed=!1};rn.prototype.dispose=function(){if(!this.isDisposed){this.isDisposed=!0;for(var t=0,e=this._disposables.length;e>t;t++)this._disposables[t].dispose();this._disposables.length=0}};var on=Bt.RefCountDisposable=function(){function t(t){this.disposable=t,this.disposable.count++,this.isInnerDisposed=!1}function e(t){this.underlyingDisposable=t,this.isDisposed=!1,this.isPrimaryDisposed=!1,this.count=0}return t.prototype.dispose=function(){this.disposable.isDisposed||this.isInnerDisposed||(this.isInnerDisposed=!0,this.disposable.count--,0===this.disposable.count&&this.disposable.isPrimaryDisposed&&(this.disposable.isDisposed=!0,this.disposable.underlyingDisposable.dispose()))},e.prototype.dispose=function(){this.isDisposed||this.isPrimaryDisposed||(this.isPrimaryDisposed=!0,0===this.count&&(this.isDisposed=!0,this.underlyingDisposable.dispose()))},e.prototype.getDisposable=function(){return this.isDisposed?Ge:new t(this)},e}();C.prototype.dispose=function(){this.scheduler.schedule(this,x)};var sn=Bt.internals.ScheduledItem=function(t,e,n,r,o){this.scheduler=t,this.state=e,this.action=n,this.dueTime=r,this.comparer=o||Jt,this.disposable=new tn};sn.prototype.invoke=function(){this.disposable.setDisposable(this.invokeCore())},sn.prototype.compareTo=function(t){return this.comparer(this.dueTime,t.dueTime)},sn.prototype.isCancelled=function(){return this.disposable.isDisposed},sn.prototype.invokeCore=function(){return Ze(this.action(this.scheduler,this.state))};var un=Bt.Scheduler=function(){function t(){}t.isScheduler=function(e){return e instanceof t};var e=t.prototype;return e.schedule=function(t,e){throw new ce},e.scheduleFuture=function(e,n,r){var o=n;return o instanceof Date&&(o-=this.now()),o=t.normalize(o),0===o?this.schedule(e,r):this._scheduleFuture(e,o,r)},e._scheduleFuture=function(t,e,n){throw new ce},t.now=Ht,t.prototype.now=Ht,t.normalize=function(t){return 0>t&&(t=0),t},t}(),cn=un.normalize,hn=un.isScheduler;!function(t){function e(t,e){function n(e){function r(t,e){return s?i.remove(c):u=!0,o(e,n),Ge}var s=!1,u=!1,c=t.schedule(e,r);u||(i.add(c),s=!0)}var r=e[0],o=e[1],i=new Ke;return o(r,n),i}function n(t,e){function n(e,r){function s(t,e){return u?i.remove(h):c=!0,o(e,n),Ge}var u=!1,c=!1,h=t.scheduleFuture(e,r,s);c||(i.add(h),u=!0)}var r=e[0],o=e[1],i=new Ke;return o(r,n),i}t.scheduleRecursive=function(t,n){return this.schedule([t,n],e)},t.scheduleRecursiveFuture=function(t,e,r){return this.scheduleFuture([t,r],e,n)}}(un.prototype),function(t){un.prototype.schedulePeriodic=function(t,e,n){if("undefined"==typeof zt.setInterval)throw new ue;e=cn(e);var r=t,o=zt.setInterval(function(){r=n(r)},e);return $e(function(){zt.clearInterval(o)})}}(un.prototype),function(t){t.catchError=t["catch"]=function(t){return new En(this,t)}}(un.prototype);var an,pn,fn=Bt.internals.SchedulePeriodicRecursive=function(){function t(t,e){e(0,this._period);try{this._state=this._action(this._state)}catch(n){throw this._cancel.dispose(),n}}function e(t,e,n,r){this._scheduler=t,this._state=e,this._period=n,this._action=r}return e.prototype.start=function(){var e=new tn;return this._cancel=e,e.setDisposable(this._scheduler.scheduleRecursiveFuture(0,this._period,t.bind(this))),e},e}(),ln=function(t){function e(){t.call(this)}return ze(e,t),e.prototype.schedule=function(t,e){return Ze(e(this,t))},e}(un),dn=un.immediate=new ln,vn=function(t){function e(){for(;r.length>0;){var t=r.dequeue();!t.isCancelled()&&t.invoke()}}function n(){t.call(this)}var r;return ze(n,t),n.prototype.schedule=function(t,n){var o=new sn(this,t,n,this.now());if(r)r.enqueue(o);else{r=new Ue(4),r.enqueue(o);var i=Yt(e)();r=null,i===Xt&&h(i.e)}return o.disposable},n.prototype.scheduleRequired=function(){return!r},n}(un),bn=un.currentThread=new vn,_n=function(){var t,e=Vt;if(zt.setTimeout)t=zt.setTimeout,e=zt.clearTimeout;else{if(!zt.WScript)throw new ue;t=function(t,e){zt.WScript.Sleep(e),t()}}return{setTimeout:t,clearTimeout:e}}(),mn=_n.setTimeout,yn=_n.clearTimeout;!function(){function t(e){if(s)mn(function(){t(e)},0);else{var n=o[e];if(n){s=!0;var r=Yt(n)();pn(e),s=!1,r===Xt&&h(r.e)}}}function e(){if(!zt.postMessage||zt.importScripts)return!1;var t=!1,e=zt.onmessage;return zt.onmessage=function(){t=!0},zt.postMessage("","*"),zt.onmessage=e,t}function n(e){"string"==typeof e.data&&e.data.substring(0,a.length)===a&&t(e.data.substring(a.length))}var r=1,o={},s=!1;pn=function(t){delete o[t]};var u=new RegExp("^"+String(Se).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/toString| for [^\]]+/g,".*?")+"$"),c="function"==typeof(c=Wt&&It&&Wt.setImmediate)&&!u.test(c)&&c;if(Gt(c))an=function(e){var n=r++;return o[n]=e,c(function(){t(n)}),n};else if("undefined"!=typeof i&&"[object process]"==={}.toString.call(i))an=function(e){var n=r++;return o[n]=e,i.nextTick(function(){t(n)}),n};else if(e()){var a="ms.rx.schedule"+Math.random();zt.addEventListener?zt.addEventListener("message",n,!1):zt.attachEvent?zt.attachEvent("onmessage",n):zt.onmessage=n,an=function(t){var e=r++;return o[e]=t,zt.postMessage(a+currentId,"*"),e}}else if(zt.MessageChannel){var p=new zt.MessageChannel;p.port1.onmessage=function(e){t(e.data)},an=function(t){var e=r++;return o[e]=t,p.port2.postMessage(e),e}}else an="document"in zt&&"onreadystatechange"in zt.document.createElement("script")?function(e){var n=zt.document.createElement("script"),i=r++;return o[i]=e,n.onreadystatechange=function(){t(i),n.onreadystatechange=null,n.parentNode.removeChild(n),n=null},zt.document.documentElement.appendChild(n),i}:function(e){var n=r++;return o[n]=e,mn(function(){t(n)},0),n}}();var wn=function(t){function e(){t.call(this)}function n(t){this._id=t,this.isDisposed=!1}return ze(e,t),n.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,yn(this._id))},e.prototype.schedule=function(t,e){var r=this,o=new tn,i=an(function(){!o.isDisposed&&o.setDisposable(Ze(e(r,t)))});return new nn(o,new n(i))},e.prototype._scheduleFuture=function(t,e,r){var o=this,i=un.normalize(e),s=new tn;if(0===i)return o.schedule(t,r);var u=mn(function(){!s.isDisposed&&s.setDisposable(Ze(r(o,t)))},i);return new nn(s,new n(u))},e}(un),gn=un["default"]=un.async=new wn,En=function(t){function e(e,n){this._scheduler=e,this._handler=n,this._recursiveOriginal=null,this._recursiveWrapper=null,t.call(this)}return ze(e,t),e.prototype.schedule=function(t,e){return this._scheduler.schedule(t,this._wrap(e))},e.prototype._scheduleFuture=function(t,e,n){return this._scheduler.schedule(t,e,this._wrap(n))},e.prototype.now=function(){return this._scheduler.now()},e.prototype._clone=function(t){return new e(t,this._handler)},e.prototype._wrap=function(t){var e=this;return function(n,r){var o=Yt(t)(e._getRecursiveWrapper(n),r);return o===Xt?(e._handler(o.e)||h(o.e),Ge):Ze(ret)}},e.prototype._getRecursiveWrapper=function(t){if(this._recursiveOriginal!==t){this._recursiveOriginal=t;var e=this._clone(t);e._recursiveOriginal=t,e._recursiveWrapper=e,this._recursiveWrapper=e}return this._recursiveWrapper},e.prototype.schedulePeriodic=function(t,e,n){var r=this,o=!1,i=new tn;return i.setDisposable(this._scheduler.schedulePeriodic(t,e,function(t){if(o)return null;var e=Yt(n)(t);return e===Xt?(o=!0,r._handler(e.e)||h(e.e),i.dispose(),null):ret})),i},e}(un),Cn=Bt.Notification=function(){function t(){}return t.prototype._accept=function(t,e,n){throw new ce},t.prototype._acceptObservable=function(t,e,n){throw new ce},t.prototype.accept=function(t,e,n){return t&&"object"==typeof t?this._acceptObservable(t):this._accept(t,e,n)},t.prototype.toObservable=function(t){var e=this;return hn(t)||(t=dn),new Xi(function(n){return t.schedule(e,function(t,e){e._acceptObservable(n),"N"===e.kind&&n.onCompleted()})})},t}(),xn=function(t){function e(t){this.value=t,this.kind="N"}return ze(e,t),e.prototype._accept=function(t){return t(this.value)},e.prototype._acceptObservable=function(t){return t.onNext(this.value)},e.prototype.toString=function(){return"OnNext("+this.value+")"},e}(Cn),Nn=function(t){function e(t){this.error=t,this.kind="E"}return ze(e,t),e.prototype._accept=function(t,e){return e(this.error)},e.prototype._acceptObservable=function(t){return t.onError(this.error)},e.prototype.toString=function(){return"OnError("+this.error+")"},e}(Cn),On=function(t){function e(){this.kind="C"}return ze(e,t),e.prototype._accept=function(t,e,n){return n()},e.prototype._acceptObservable=function(t){return t.onCompleted()},e.prototype.toString=function(){return"OnCompleted()"},e}(Cn),Dn=Cn.createOnNext=function(t){return new xn(t)},Sn=Cn.createOnError=function(t){return new Nn(t)},An=Cn.createOnCompleted=function(){return new On},jn=Bt.Observer=function(){};jn.prototype.toNotifier=function(){var t=this;return function(e){return e.accept(t)}},jn.prototype.asObserver=function(){var t=this;return new Pn(function(e){t.onNext(e)},function(e){t.onError(e)},function(){t.onCompleted()})},jn.prototype.checked=function(){return new Fn(this)};var kn=jn.create=function(t,e,n){return t||(t=Vt),e||(e=Qt),n||(n=Vt),new Pn(t,e,n)};jn.fromNotifier=function(t,e){var n=ve(t,e,1);return new Pn(function(t){return n(Dn(t))},function(t){return n(Sn(t))},function(){return n(An())})},jn.prototype.notifyOn=function(t){return new Mn(t,this)},jn.prototype.makeSafe=function(t){return new AnonymousSafeObserver(this._onNext,this._onError,this._onCompleted,t)};var qn,Tn=Bt.internals.AbstractObserver=function(t){function e(){this.isStopped=!1}return ze(e,t),e.prototype.next=he,e.prototype.error=he,e.prototype.completed=he,e.prototype.onNext=function(t){!this.isStopped&&this.next(t)},e.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.error(t))},e.prototype.onCompleted=function(){this.isStopped||(this.isStopped=!0,this.completed())},e.prototype.dispose=function(){this.isStopped=!0},e.prototype.fail=function(t){return this.isStopped?!1:(this.isStopped=!0,this.error(t),!0)},e}(jn),Pn=Bt.AnonymousObserver=function(t){function e(e,n,r){t.call(this),this._onNext=e,this._onError=n,this._onCompleted=r}return ze(e,t),e.prototype.next=function(t){this._onNext(t)},e.prototype.error=function(t){this._onError(t)},e.prototype.completed=function(){this._onCompleted()},e}(Tn),Fn=function(t){function e(e){t.call(this),this._observer=e,this._state=0}ze(e,t);var n=e.prototype;return n.onNext=function(t){this.checkAccess();var e=Yt(this._observer.onNext).call(this._observer,t);this._state=0,e===Xt&&h(e.e)},n.onError=function(t){this.checkAccess();var e=Yt(this._observer.onError).call(this._observer,t);this._state=2,e===Xt&&h(e.e)},n.onCompleted=function(){this.checkAccess();var t=Yt(this._observer.onCompleted).call(this._observer);this._state=2,t===Xt&&h(t.e)},n.checkAccess=function(){if(1===this._state)throw new Error("Re-entrancy detected");if(2===this._state)throw new Error("Observer completed");0===this._state&&(this._state=1)},e}(jn),Rn=Bt.internals.ScheduledObserver=function(t){function e(e,n){t.call(this),this.scheduler=e,this.observer=n,this.isAcquired=!1,this.hasFaulted=!1,this.queue=[],this.disposable=new en}return ze(e,t),e.prototype.next=function(t){var e=this;this.queue.push(function(){e.observer.onNext(t)})},e.prototype.error=function(t){var e=this;this.queue.push(function(){e.observer.onError(t)})},e.prototype.completed=function(){var t=this;this.queue.push(function(){t.observer.onCompleted()})},e.prototype.ensureActive=function(){var t=!1;!this.hasFaulted&&this.queue.length>0&&(t=!this.isAcquired,this.isAcquired=!0),t&&this.disposable.setDisposable(this.scheduler.scheduleRecursive(this,function(t,e){var n;if(!(t.queue.length>0))return void(t.isAcquired=!1);n=t.queue.shift();var r=Yt(n)();return r===Xt?(t.queue=[],t.hasFaulted=!0,h(r.e)):void e(t)}))},e.prototype.dispose=function(){t.prototype.dispose.call(this),this.disposable.dispose()},e}(Tn),Mn=function(t){function e(e,n,r){t.call(this,e,n),this._cancel=r}return ze(e,t),e.prototype.next=function(e){t.prototype.next.call(this,e),this.ensureActive()},e.prototype.error=function(e){t.prototype.error.call(this,e),this.ensureActive()},e.prototype.completed=function(){t.prototype.completed.call(this),this.ensureActive()},e.prototype.dispose=function(){t.prototype.dispose.call(this),this._cancel&&this._cancel.dispose(),this._cancel=null},e}(Rn),Ln=Bt.Observable=function(){function t(t,e){return function(n){var r=n.onError;return n.onError=function(e){a(e,t),r.call(n,e)},e.call(t,n)}}function e(){if(Bt.config.longStackSupport&&Zt){var e=this._subscribe,n=Yt(h)(new Error).e;this.stack=n.stack.substring(n.stack.indexOf("\n")+1),this._subscribe=t(this,e)}}return qn=e.prototype,e.isObservable=function(t){return t&&Gt(t.subscribe)},qn.subscribe=qn.forEach=function(t,e,n){return this._subscribe("object"==typeof t?t:kn(t,e,n))},qn.subscribeOnNext=function(t,e){return this._subscribe(kn("undefined"!=typeof e?function(n){t.call(e,n)}:t))},qn.subscribeOnError=function(t,e){return this._subscribe(kn(null,"undefined"!=typeof e?function(n){t.call(e,n)}:t))},qn.subscribeOnCompleted=function(t,e){return this._subscribe(kn(null,null,"undefined"!=typeof e?function(){t.call(e)}:t))},e}(),In=Bt.ObservableBase=function(t){function e(t){return t&&Gt(t.dispose)?t:Gt(t)?$e(t):Ge}function n(t,n){var r=n[0],o=n[1],i=Yt(o.subscribeCore).call(o,r);i!==Xt||r.fail(Xt.e)||h(Xt.e),r.setDisposable(e(i))}function r(){t.call(this)}return ze(r,t),r.prototype._subscribe=function(t){var e=new Yi(t),r=[e,this];return bn.scheduleRequired()?bn.schedule(r,n):n(null,r),e},r.prototype.subscribeCore=he,r}(Ln),Wn=Bt.FlatMapObservable=function(t){function e(e,n,r,o){this.resultSelector=Gt(r)?r:null,this.selector=ve(Gt(n)?n:function(){return n},o,3),this.source=e,t.call(this)}function n(t,e,n,r){this.i=0,this.selector=e,this.resultSelector=n,this.source=r,this.o=t,Tn.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this.selector,this.resultSelector,this))},ze(n,Tn),n.prototype._wrapResult=function(t,e,n){return this.resultSelector?t.map(function(t,r){return this.resultSelector(e,t,n,r)},this):t},n.prototype.next=function(t){var e=this.i++,n=Yt(this.selector)(t,e,this.source);return n===Xt?this.o.onError(n.e):($t(n)&&(n=Xn(n)),(le(n)||fe(n))&&(n=Ln.from(n)),void this.o.onNext(this._wrapResult(n,t,e)))},n.prototype.error=function(t){this.o.onError(t)},n.prototype.onCompleted=function(){this.o.onCompleted()},e}(In),zn=Bt.internals.Enumerable=function(){};N.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._s.isDisposed=!0)};var Bn=function(t){function e(e){this.sources=e,t.call(this)}function n(t,e,n){this._o=t,this._s=e,this._e=n,Tn.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e={isDisposed:!1},r=new en,o=bn.scheduleRecursive(this.sources[ae](),function(o,i){if(!e.isDisposed){var s=Yt(o.next).call(o);if(s===Xt)return t.onError(s.e);if(s.done)return t.onCompleted();var u=s.value;$t(u)&&(u=Xn(u));var c=new tn;r.setDisposable(c),c.setDisposable(u.subscribe(new n(t,i,o)))}});return new rn([r,o,new N(e)])},ze(n,Tn),n.prototype.onNext=function(t){this._o.onNext(t)},n.prototype.onError=function(t){this._o.onError(t)},n.prototype.onCompleted=function(){this._s(this._e)},e}(In);zn.prototype.concat=function(){return new Bn(this)};var Vn=function(t){function e(e){this.sources=e,t.call(this)}function n(t,e){this._o=t,this._recurse=e,Tn.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=this.sources[ae](),r={isDisposed:!1},o=new en,i=bn.scheduleRecursive(null,function(i,s){if(!r.isDisposed){var u=Yt(e.next).call(e);if(u===Xt)return t.onError(u.e);if(u.done)return null!==i?t.onError(i):t.onCompleted();var c=u.value;$t(c)&&(c=Xn(c));var h=new tn;o.setDisposable(h),h.setDisposable(c.subscribe(new n(t,s)))}});return new rn([o,i,new N(r)])},ze(n,Tn),n.prototype.next=function(t){this._o.onNext(t)},n.prototype.error=function(t){this._recurse(t)},n.prototype.completed=function(){this._o.onCompleted()},e}(In);zn.prototype.catchError=function(){return new Vn(this)},zn.prototype.catchErrorWhen=function(t){var e=this;return new Xi(function(n){var r,o=new es,i=new es,s=t(o),u=s.subscribe(i),c=e[ae](),h={isDisposed:!1},a=new en,p=bn.scheduleRecursive(null,function(t,e){if(!h.isDisposed){var s=Yt(c.next).call(c);if(s===Xt)return n.onError(s.e);if(s.done)return void(r?n.onError(r):n.onCompleted());var u=s.value;$t(u)&&(u=Xn(u));var p=new tn,f=new tn;a.setDisposable(new nn(f,p)),p.setDisposable(u.subscribe(function(t){n.onNext(t)},function(t){f.setDisposable(i.subscribe(e,function(t){n.onError(t)},function(){n.onCompleted()})),o.onNext(t)},function(){n.onCompleted()}))}});return new rn([u,a,p,new N(h)])})};var Un=function(t){function e(t,e){this.v=t,this.c=null==e?-1:e}function n(t){this.v=t.v,this.l=t.c}return ze(e,t),e.prototype[ae]=function(){return new n(this)},n.prototype.next=function(){return 0===this.l?pe:(this.l>0&&this.l--,{done:!1,value:this.v})},e}(zn),Hn=zn.repeat=function(t,e){return new Un(t,e)},Kn=function(t){function e(t,e,n){this.s=t,this.fn=e?ve(e,n,3):null}function n(t){this.i=-1,this.s=t.s,this.l=this.s.length,this.fn=t.fn}return ze(e,t),e.prototype[ae]=function(){return new n(this)},n.prototype.next=function(){return++this.i<this.l?{done:!1,value:this.fn?this.fn(this.s[this.i],this.i,this.s):this.s[this.i]}:pe},e}(zn),Jn=zn.of=function(t,e,n){return new Kn(t,e,n)},Qn=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Mn(this._s,t))},e}(In);qn.observeOn=function(t){return new Qn(this,t)};var $n=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}function n(t,e){var n=e[0],r=e[1],o=e[2];r.setDisposable(new C(t,n.subscribe(o)))}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new tn,r=new en;return r.setDisposable(e),e.setDisposable(this._s.schedule([this.source,r,t],n)),r},e}(In);qn.subscribeOn=function(t){return new $n(this,t)};var Gn=function(t){function e(e){this.p=e,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.p.then(function(e){t.onNext(e),t.onCompleted()},function(e){t.onError(e)}),Ge},e}(In),Xn=Ln.fromPromise=function(t){return new Gn(t)};qn.toPromise=function(t){if(t||(t=Bt.config.Promise),!t)throw new ue("Promise type not provided nor in Rx.config.Promise");var e=this;return new t(function(t,n){var r;e.subscribe(function(t){r=t},n,function(){t(r)})})};var Yn=function(t){function e(e){this.source=e,t.call(this)}function n(t){this.o=t,this.a=[],Tn.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t))},ze(n,Tn),n.prototype.next=function(t){this.a.push(t)},n.prototype.error=function(t){this.o.onError(t)},n.prototype.completed=function(){this.o.onNext(this.a),this.o.onCompleted()},e}(In);qn.toArray=function(){return new Yn(this)},Ln.create=function(t,e){return new Xi(t,e)};var Zn=function(t){function e(e){this._f=e,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=Yt(this._f)();return e===Xt?wr(e.e).subscribe(t):($t(e)&&(e=Xn(e)),e.subscribe(t))},e}(In),tr=Ln.defer=function(t){return new Zn(t)},er=function(t){function e(e){this.scheduler=e,t.call(this)}function n(t,e){this.observer=t,this.scheduler=e}function r(t,e){return e.onCompleted(),Ge}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new n(t,this.scheduler);return e.run()},n.prototype.run=function(){var t=this.observer;return this.scheduler===dn?r(null,t):this.scheduler.schedule(t,r)},e}(In),nr=new er(dn),rr=Ln.empty=function(t){return hn(t)||(t=dn),t===dn?nr:new er(t)},or=function(t){function e(e,n,r){this.iterable=e,this.mapper=n,this.scheduler=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new ir(t,this);return e.run()},e}(In),ir=function(){function t(t,e){this.o=t,this.parent=e}return t.prototype.run=function(){function t(t,e){var i=Yt(n.next).call(n);if(i===Xt)return r.onError(i.e);if(i.done)return r.onCompleted();var s=i.value;return Gt(o)&&(s=Yt(o)(s,t),s===Xt)?r.onError(s.e):(r.onNext(s),void e(t+1))}var e=Object(this.parent.iterable),n=k(e),r=this.o,o=this.parent.mapper;return this.parent.scheduler.scheduleRecursive(0,t)},t}(),sr=Math.pow(2,53)-1;O.prototype[ae]=function(){return new D(this._s)},D.prototype[ae]=function(){return this},D.prototype.next=function(){return this._i<this._l?{done:!1,value:this._s.charAt(this._i++)}:pe},S.prototype[ae]=function(){return new A(this._a)},A.prototype[ae]=function(){return this},A.prototype.next=function(){return this._i<this._l?{done:!1,value:this._a[this._i++]}:pe};var ur=Ln.from=function(t,e,n,r){if(null==t)throw new Error("iterable cannot be null.");if(e&&!Gt(e))throw new Error("mapFn when provided must be a function");if(e)var o=ve(e,n,2);return hn(r)||(r=bn),new or(t,o,r)},cr=function(t){function e(e,n){this.args=e,this.scheduler=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new P(t,this);return e.run()},e}(In);P.prototype.run=function(){function t(t,o){r>t?(e.onNext(n[t]),o(t+1)):e.onCompleted()}var e=this.observer,n=this.parent.args,r=n.length;return this.parent.scheduler.scheduleRecursive(0,t)};var hr=Ln.fromArray=function(t,e){return hn(e)||(e=bn),new cr(t,e)},ar=function(t){function e(e,n,r,o,i){this._state=e,this._cndFn=n,this._itrFn=r,this._resFn=o,this._s=i,this._first=!0,t.call(this)}function n(t,e){if(t._first)t._first=!1;else if(t._state=Yt(t._itrFn)(t._state),t._state===Xt)return t._o.onError(t._state.e);var n=Yt(t._cndFn)(t._state);if(n===Xt)return t._o.onError(n.e);if(n){var r=Yt(t._resFn)(t._state);if(r===Xt)return t._o.onError(r.e);t._o.onNext(r),e(t)}else t._o.onCompleted()}return ze(e,t),e.prototype.subscribeCore=function(t){return this._o=t,this._s.scheduleRecursive(this,n)},e}(In);Ln.generate=function(t,e,n,r,o){return hn(o)||(o=bn),new ar(t,e,n,r,o)},Ln.of=function(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return new cr(e,bn)},Ln.ofWithScheduler=function(t){for(var e=arguments.length,n=new Array(e-1),r=1;e>r;r++)n[r-1]=arguments[r];return new cr(n,t)},Ln.ofArrayChanges=function(t){if(!Array.isArray(t))throw new TypeError("Array.observe only accepts arrays.");if("function"!=typeof Array.observe&&"function"!=typeof Array.unobserve)throw new TypeError("Array.observe is not supported on your platform");return new Xi(function(e){function n(t){for(var n=0,r=t.length;r>n;n++)e.onNext(t[n])}return Array.observe(t,n),function(){Array.unobserve(t,n)}})},Ln.ofObjectChanges=function(t){if(null==t)throw new TypeError("object must not be null or undefined.");if("function"!=typeof Object.observe&&"function"!=typeof Object.unobserve)throw new TypeError("Object.observe is not supported on your platform");return new Xi(function(e){function n(t){for(var n=0,r=t.length;r>n;n++)e.onNext(t[n])}return Object.observe(t,n),function(){Object.unobserve(t,n)}})};var pr=function(t){function e(){t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return Ge},e}(In),fr=new pr,lr=Ln.never=function(){return fr},dr=function(t){function e(e,n){this.obj=e,this.keys=Object.keys(e),this.scheduler=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new R(t,this);return e.run()},e}(In);R.prototype.run=function(){function t(t,i){if(o>t){var s=r[t];e.onNext([s,n[s]]),i(t+1)}else e.onCompleted()}var e=this.observer,n=this.parent.obj,r=this.parent.keys,o=r.length;return this.parent.scheduler.scheduleRecursive(0,t)},Ln.pairs=function(t,e){return e||(e=bn),new dr(t,e)};var vr=function(t){function e(e,n,r){this.start=e,this.rangeCount=n,this.scheduler=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new br(t,this);return e.run()},e}(In),br=function(){function t(t,e){this.observer=t,this.parent=e}return t.prototype.run=function(){function t(t,o){n>t?(r.onNext(e+t),o(t+1)):r.onCompleted()}var e=this.parent.start,n=this.parent.rangeCount,r=this.observer;return this.parent.scheduler.scheduleRecursive(0,t)},t}();Ln.range=function(t,e,n){return hn(n)||(n=bn),new vr(t,e,n)};var _r=function(t){function e(e,n,r){this.value=e,this.repeatCount=null==n?-1:n,this.scheduler=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new M(t,this);return e.run()},e}(In);M.prototype.run=function(){function t(t,r){return(-1===t||t>0)&&(e.onNext(n),t>0&&t--),0===t?e.onCompleted():void r(t)}var e=this.observer,n=this.parent.value;return this.parent.scheduler.scheduleRecursive(this.parent.repeatCount,t)},Ln.repeat=function(t,e,n){return hn(n)||(n=bn),new _r(t,e,n)};var mr=function(t){function e(e,n){this.value=e,this.scheduler=n,t.call(this)}function n(t,e,n){this.observer=t,this.value=e,this.scheduler=n}function r(t,e){var n=e[0],r=e[1];return r.onNext(n),r.onCompleted(),Ge}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new n(t,this.value,this.scheduler);return e.run()},n.prototype.run=function(){var t=[this.value,this.observer];return this.scheduler===dn?r(null,t):this.scheduler.schedule(t,r)},e}(In),yr=(Ln["return"]=Ln.just=function(t,e){return hn(e)||(e=dn),new mr(t,e)},function(t){function e(e,n){this.error=e,this.scheduler=n,t.call(this)}function n(t,e){this.o=t,this.p=e}function r(t,e){var n=e[0],r=e[1];r.onError(n)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new n(t,this);return e.run()},n.prototype.run=function(){return this.p.scheduler.schedule([this.p.error,this.o],r)},e}(In)),wr=Ln["throw"]=function(t,e){return hn(e)||(e=dn),new yr(t,e)},gr=function(t){function e(e,n){this._resFn=e,this._obsFn=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=Ge,n=Yt(this._resFn)();if(n===Xt)return new nn(wr(n.e).subscribe(t),e);n&&(e=n);var r=Yt(this._obsFn)(n);return r===Xt?new nn(wr(r.e).subscribe(t),e):new nn(r.subscribe(t),e)},e}(In);Ln.using=function(t,e){return new gr(t,e)},qn.amb=function(t){var e=this;return new Xi(function(n){function r(){i||(i=s,h.dispose())}function o(){i||(i=u,c.dispose())}var i,s="L",u="R",c=new tn,h=new tn;$t(t)&&(t=Xn(t));var a=kn(function(t){r(),i===s&&n.onNext(t)},function(t){r(),i===s&&n.onError(t)},function(){r(),i===s&&n.onCompleted()}),p=kn(function(t){o(),i===u&&n.onNext(t)},function(t){o(),i===u&&n.onError(t)},function(){o(),i===u&&n.onCompleted()});return c.setDisposable(e.subscribe(a)),h.setDisposable(t.subscribe(p)),new nn(c,h)})},Ln.amb=function(){var t,e=lr();if(Array.isArray(arguments[0]))t=arguments[0];else{var n=arguments.length;t=new Array(t);for(var r=0;n>r;r++)t[r]=arguments[r]}for(var r=0,n=t.length;n>r;r++)e=L(e,t[r]);return e};var Er=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new tn,n=new en;return n.setDisposable(e),e.setDisposable(this.source.subscribe(new Cr(t,n,this._fn))),n},e}(In),Cr=function(t){function e(e,n,r){this._o=e,this._s=n,this._fn=r,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._o.onNext(t)},e.prototype.completed=function(){return this._o.onCompleted()},e.prototype.error=function(t){var e=Yt(this._fn)(t);if(e===Xt)return this._o.onError(e.e);$t(e)&&(e=Xn(e));var n=new tn;this._s.setDisposable(n),n.setDisposable(e.subscribe(this._o))},e}(Tn);qn["catch"]=function(t){return Gt(t)?new Er(this,t):xr([this,t])};var xr=Ln["catch"]=function(){var t;if(Array.isArray(arguments[0]))t=arguments[0];else{var e=arguments.length;t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}return Jn(t).catchError()};qn.combineLatest=function(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];return Array.isArray(e[0])?e[0].unshift(this):e.unshift(this),Dr.apply(this,e)};var Nr=function(t){function e(e,n){var r=e.length;this._params=e,this._cb=n,this._hv=g(r,I),this._hvAll=!1,this._done=g(r,I),this._v=new Array(r),t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){for(var e=this._params.length,n=new Array(e),r=0;e>r;r++){var o=this._params[r],i=new tn;n[r]=i,$t(o)&&(o=Xn(o)),i.setDisposable(o.subscribe(new Or(t,r,this)))}return new rn(n)},e}(In),Or=function(t){function e(e,n,r){this._o=e,this._i=n,this._p=r,t.call(this)}return ze(e,t),e.prototype.next=function(t){
if(this._p._v[this._i]=t,this._p._hv[this._i]=!0,this._p._hvAll||(this._p._hvAll=this._p._hv.every(Ut))){var e=Yt(this._p._cb).apply(null,this._p._v);if(e===Xt)return this._o.onError(e.e);this._o.onNext(e)}else this._p._done.filter(function(t,e){return e!==this._i},this).every(Ut)&&this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._p._done[this._i]=!0,this._p._done.every(Ut)&&this._o.onCompleted()},e}(Tn),Dr=Ln.combineLatest=function(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];var r=Gt(e[t-1])?e.pop():W;return Array.isArray(e[0])&&(e=e[0]),new Nr(e,r)};qn.concat=function(){for(var t=[],e=0,n=arguments.length;n>e;e++)t.push(arguments[e]);return t.unshift(this),Ar.apply(null,t)};var Sr=function(t){function e(e){this.sources=e,t.call(this)}function n(t,e){this.sources=t,this.o=e}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new n(this.sources,t);return e.run()},n.prototype.run=function(){var t,e=new en,n=this.sources,r=n.length,o=this.o,i=dn.scheduleRecursive(0,function(i,s){if(!t){if(i===r)return o.onCompleted();var u=n[i];$t(u)&&(u=Xn(u));var c=new tn;e.setDisposable(c),c.setDisposable(u.subscribe(function(t){o.onNext(t)},function(t){o.onError(t)},function(){s(i+1)}))}});return new Ke(e,i,$e(function(){t=!0}))},e}(In),Ar=Ln.concat=function(){var t;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(arguments.length);for(var e=0,n=arguments.length;n>e;e++)t[e]=arguments[e]}return new Sr(t)};qn.concatAll=function(){return this.merge(1)};var jr=function(t){function e(e,n){this.source=e,this.maxConcurrent=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new Ke;return e.add(this.source.subscribe(new kr(t,this.maxConcurrent,e))),e},e}(In),kr=function(){function t(t,e,n){this.o=t,this.max=e,this.g=n,this.done=!1,this.q=[],this.activeCount=0,this.isStopped=!1}function e(t,e){this.parent=t,this.sad=e,this.isStopped=!1}return t.prototype.handleSubscribe=function(t){var n=new tn;this.g.add(n),$t(t)&&(t=Xn(t)),n.setDisposable(t.subscribe(new e(this,n)))},t.prototype.onNext=function(t){this.isStopped||(this.activeCount<this.max?(this.activeCount++,this.handleSubscribe(t)):this.q.push(t))},t.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.o.onError(t))},t.prototype.onCompleted=function(){this.isStopped||(this.isStopped=!0,this.done=!0,0===this.activeCount&&this.o.onCompleted())},t.prototype.dispose=function(){this.isStopped=!0},t.prototype.fail=function(t){return this.isStopped?!1:(this.isStopped=!0,this.o.onError(t),!0)},e.prototype.onNext=function(t){this.isStopped||this.parent.o.onNext(t)},e.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.parent.o.onError(t))},e.prototype.onCompleted=function(){if(!this.isStopped){this.isStopped=!0;var t=this.parent;t.g.remove(this.sad),t.q.length>0?t.handleSubscribe(t.q.shift()):(t.activeCount--,t.done&&0===t.activeCount&&t.o.onCompleted())}},e.prototype.dispose=function(){this.isStopped=!0},e.prototype.fail=function(t){return this.isStopped?!1:(this.isStopped=!0,this.parent.o.onError(t),!0)},t}();qn.merge=function(t){return"number"!=typeof t?qr(this,t):new jr(this,t)};var qr=Ln.merge=function(){var t,e,n=[],r=arguments.length;if(arguments[0])if(hn(arguments[0]))for(t=arguments[0],e=1;r>e;e++)n.push(arguments[e]);else for(t=dn,e=0;r>e;e++)n.push(arguments[e]);else for(t=dn,e=1;r>e;e++)n.push(arguments[e]);return Array.isArray(n[0])&&(n=n[0]),F(t,n).mergeAll()},Tr=function(t){function e(e){this.source=e,t.call(this)}function n(t,e){this.o=t,this.g=e,this.isStopped=!1,this.done=!1}function r(t,e){this.parent=t,this.sad=e,this.isStopped=!1}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new Ke,r=new tn;return e.add(r),r.setDisposable(this.source.subscribe(new n(t,e))),e},n.prototype.onNext=function(t){if(!this.isStopped){var e=new tn;this.g.add(e),$t(t)&&(t=Xn(t)),e.setDisposable(t.subscribe(new r(this,e)))}},n.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.o.onError(t))},n.prototype.onCompleted=function(){this.isStopped||(this.isStopped=!0,this.done=!0,1===this.g.length&&this.o.onCompleted())},n.prototype.dispose=function(){this.isStopped=!0},n.prototype.fail=function(t){return this.isStopped?!1:(this.isStopped=!0,this.o.onError(t),!0)},r.prototype.onNext=function(t){this.isStopped||this.parent.o.onNext(t)},r.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.parent.o.onError(t))},r.prototype.onCompleted=function(){if(!this.isStopped){var t=this.parent;this.isStopped=!0,t.g.remove(this.sad),t.done&&1===t.g.length&&t.o.onCompleted()}},r.prototype.dispose=function(){this.isStopped=!0},r.prototype.fail=function(t){return this.isStopped?!1:(this.isStopped=!0,this.parent.o.onError(t),!0)},e}(In);qn.mergeAll=function(){return new Tr(this)};var Pr=Bt.CompositeError=function(t){this.name="NotImplementedError",this.innerErrors=t,this.message="This contains multiple errors. Check the innerErrors",Error.call(this)};Pr.prototype=Error.prototype,Ln.mergeDelayError=function(){var t;if(Array.isArray(arguments[0]))t=arguments[0];else{var e=arguments.length;t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}var r=F(null,t);return new Xi(function(t){function e(){0===s.length?t.onCompleted():1===s.length?t.onError(s[0]):t.onError(new Pr(s))}var n=new Ke,o=new tn,i=!1,s=[];return n.add(o),o.setDisposable(r.subscribe(function(r){var o=new tn;n.add(o),$t(r)&&(r=Xn(r)),o.setDisposable(r.subscribe(function(e){t.onNext(e)},function(t){s.push(t),n.remove(o),i&&1===n.length&&e()},function(){n.remove(o),i&&1===n.length&&e()}))},function(t){s.push(t),i=!0,1===n.length&&e()},function(){i=!0,1===n.length&&e()})),n})},qn.onErrorResumeNext=function(t){if(!t)throw new Error("Second observable is required");return Fr([this,t])};var Fr=Ln.onErrorResumeNext=function(){var t=[];if(Array.isArray(arguments[0]))t=arguments[0];else for(var e=0,n=arguments.length;n>e;e++)t.push(arguments[e]);return new Xi(function(e){var n=0,r=new en,o=dn.scheduleRecursive(null,function(o,i){var s,u;n<t.length?(s=t[n++],$t(s)&&(s=Xn(s)),u=new tn,r.setDisposable(u),u.setDisposable(s.subscribe(e.onNext.bind(e),i,i))):e.onCompleted()});return new nn(r,o)})},Rr=function(t){function e(e,n){this._s=e,this._o=$t(n)?Xn(n):n,this._open=!1,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new tn;e.setDisposable(this._s.subscribe(new Mr(t,this))),$t(this._o)&&(this._o=Xn(this._o));var n=new tn;return n.setDisposable(this._o.subscribe(new Lr(t,this,n))),new nn(e,n)},e}(In),Mr=function(t){function e(e,n){this._o=e,this._p=n,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._p._open&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.onCompleted=function(){this._p._open&&this._o.onCompleted()},e}(Tn),Lr=function(t){function e(e,n,r){this._o=e,this._p=n,this._r=r,t.call(this)}return ze(e,t),e.prototype.next=function(){this._p._open=!0,this._r.dispose()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.onCompleted=function(){this._r.dispose()},e}(Tn);qn.skipUntil=function(t){return new Rr(this,t)};var Ir=function(t){function e(e){this.source=e,t.call(this)}function n(t,e){this.o=t,this.inner=e,this.stopped=!1,this.latest=0,this.hasLatest=!1,Tn.call(this)}function r(t,e){this.parent=t,this.id=e,Tn.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new en,r=this.source.subscribe(new n(t,e));return new nn(r,e)},ze(n,Tn),n.prototype.next=function(t){var e=new tn,n=++this.latest;this.hasLatest=!0,this.inner.setDisposable(e),$t(t)&&(t=Xn(t)),e.setDisposable(t.subscribe(new r(this,n)))},n.prototype.error=function(t){this.o.onError(t)},n.prototype.completed=function(){this.stopped=!0,!this.hasLatest&&this.o.onCompleted()},ze(r,Tn),r.prototype.next=function(t){this.parent.latest===this.id&&this.parent.o.onNext(t)},r.prototype.error=function(t){this.parent.latest===this.id&&this.parent.o.onError(t)},r.prototype.completed=function(){this.parent.latest===this.id&&(this.parent.hasLatest=!1,this.parent.isStopped&&this.parent.o.onCompleted())},e}(In);qn["switch"]=qn.switchLatest=function(){return new Ir(this)};var Wr=function(t){function e(e,n){this.source=e,this.other=$t(n)?Xn(n):n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return new nn(this.source.subscribe(t),this.other.subscribe(new zr(t)))},e}(In),zr=function(t){function e(e){this._o=e,t.call(this)}return ze(e,t),e.prototype.next=function(){this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.onCompleted=Vt,e}(Tn);qn.takeUntil=function(t){return new Wr(this,t)};var Br=function(t){function e(e,n,r){var o=n.length;this._s=e,this._ss=n,this._cb=r,this._hv=g(o,I),this._hvAll=!1,this._v=new Array(o),t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){for(var e=this._ss.length,n=new Array(e+1),r=0;e>r;r++){var o=this._ss[r],i=new tn;$t(o)&&(o=Xn(o)),i.setDisposable(o.subscribe(new Vr(t,r,this))),n[r]=i}var i=new tn;return i.setDisposable(this._s.subscribe(new Ur(t,this))),n[e]=i,new rn(n)},e}(In),Vr=function(t){function e(e,n,r){this._o=e,this._i=n,this._p=r,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._p._v[this._i]=t,this._p._hv[this._i]=!0,this._p._hvAll=this._p._hv.every(Ut)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=Vt,e}(Tn),Ur=function(t){function e(e,n){this._o=e,this._p=n,t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=[t].concat(this._p._v);if(this._p._hvAll){var n=Yt(this._p._cb).apply(null,e);return n===Xt?this._o.onError(n.e):void this._o.onNext(n)}},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.withLatestFrom=function(){if(0===arguments.length)throw new Error("invalid arguments");for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];var r=Gt(e[t-1])?e.pop():W;return Array.isArray(e[0])&&(e=e[0]),new Br(this,e,r)};var Hr=function(t){function e(e,n){var r=e.length;this._s=e,this._cb=n,this._done=g(r,I),this._q=g(r,z),t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){for(var e=this._s.length,n=new Array(e),r=0;e>r;r++){var o=this._s[r],i=new tn;n[r]=i,$t(o)&&(o=Xn(o)),i.setDisposable(o.subscribe(new Kr(t,r,this)))}return new rn(n)},e}(In),Kr=function(t){function e(e,n,r){this._o=e,this._i=n,this._p=r,t.call(this)}return ze(e,t),e.prototype.next=function(t){if(this._p._q[this._i].push(t),this._p._q.every(function(t){return t.length>0})){var e=this._p._q.map(function(t){return t.shift()}),n=Yt(this._p._cb).apply(null,e);if(n===Xt)return this._o.onError(n.e);this._o.onNext(n)}else this._p._done.filter(function(t,e){return e!==this._i},this).every(Ut)&&this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._p._done[this._i]=!0,this._p._done.every(Ut)&&this._o.onCompleted()},e}(Tn);qn.zip=function(){if(0===arguments.length)throw new Error("invalid arguments");for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];var r=Gt(e[t-1])?e.pop():W;Array.isArray(e[0])&&(e=e[0]);var o=this;return e.unshift(o),new Hr(e,r)},Ln.zip=function(){for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];Array.isArray(e[0])&&(e=Gt(e[1])?e[0].concat(e[1]):e[0]);var r=e.shift();return r.zip.apply(r,e)},qn.zipIterable=function(){if(0===arguments.length)throw new Error("invalid arguments");for(var t=arguments.length,e=new Array(t),n=0;t>n;n++)e[n]=arguments[n];var r=Gt(e[t-1])?e.pop():W,o=this;return e.unshift(o),new Xi(function(t){for(var n=e.length,i=g(n,z),s=g(n,I),u=new Array(n),c=0;n>c;c++)!function(n){var c=e[n],h=new tn;(le(c)||fe(c))&&(c=ur(c)),h.setDisposable(c.subscribe(function(e){if(i[n].push(e),i.every(function(t){return t.length>0})){var u=i.map(function(t){return t.shift()}),c=Yt(r).apply(o,u);if(c===Xt)return t.onError(c.e);t.onNext(c)}else s.filter(function(t,e){return e!==n}).every(Ut)&&t.onCompleted()},function(e){t.onError(e)},function(){s[n]=!0,s.every(Ut)&&t.onCompleted()})),u[n]=h}(c);return new Ke(u)},o)},qn.asObservable=function(){return new Xi(B(this),this)},qn.bufferWithCount=function(t,e){return"number"!=typeof e&&(e=t),this.windowWithCount(t,e).flatMap(V).filter(U)};var Jr=function(t){function e(e){this.source=e,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Qr(t))},e}(In),Qr=function(t){function e(e){this._o=e,t.call(this)}return ze(e,t),e.prototype.next=function(t){t.accept(this._o)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.dematerialize=function(){return new Jr(this)};var $r=function(t){function e(e,n,r){this.source=e,this.keyFn=n,this.comparer=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Gr(t,this.keyFn,this.comparer))},e}(In),Gr=function(t){function e(e,n,r){this.o=e,this.keyFn=n,this.comparer=r,this.hasCurrentKey=!1,this.currentKey=null,t.call(this)}return ze(e,t),e.prototype.next=function(t){var e,n=t;return Gt(this.keyFn)&&(n=Yt(this.keyFn)(t),n===Xt)?this.o.onError(n.e):this.hasCurrentKey&&(e=Yt(this.comparer)(this.currentKey,n),e===Xt)?this.o.onError(e.e):void(this.hasCurrentKey&&e||(this.hasCurrentKey=!0,this.currentKey=n,this.o.onNext(t)))},e.prototype.error=function(t){this.o.onError(t)},e.prototype.completed=function(){this.o.onCompleted()},e}(Tn);qn.distinctUntilChanged=function(t,e){return e||(e=Kt),new $r(this,t,e)};var Xr=function(t){function e(e,n,r,o){this.source=e,this._oN=n,this._oE=r,this._oC=o,t.call(this)}function n(t,e){this.o=t,this.t=!e._oN||Gt(e._oN)?kn(e._oN||Vt,e._oE||Vt,e._oC||Vt):e._oN,this.isStopped=!1,Tn.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this))},ze(n,Tn),n.prototype.next=function(t){var e=Yt(this.t.onNext).call(this.t,t);e===Xt&&this.o.onError(e.e),this.o.onNext(t)},n.prototype.error=function(t){var e=Yt(this.t.onError).call(this.t,t);return e===Xt?this.o.onError(e.e):void this.o.onError(t)},n.prototype.completed=function(){var t=Yt(this.t.onCompleted).call(this.t);return t===Xt?this.o.onError(t.e):void this.o.onCompleted()},e}(In);qn["do"]=qn.tap=qn.doAction=function(t,e,n){return new Xr(this,t,e,n)},qn.doOnNext=qn.tapOnNext=function(t,e){return this.tap("undefined"!=typeof e?function(n){t.call(e,n)}:t)},qn.doOnError=qn.tapOnError=function(t,e){return this.tap(Vt,"undefined"!=typeof e?function(n){t.call(e,n)}:t)},qn.doOnCompleted=qn.tapOnCompleted=function(t,e){return this.tap(Vt,null,"undefined"!=typeof e?function(){t.call(e)}:t)},qn["finally"]=function(t){var e=this;return new Xi(function(n){var r=Yt(e.subscribe).call(e,n);return r===Xt?(t(),h(r.e)):$e(function(){var e=Yt(r.dispose).call(r);t(),e===Xt&&h(e.e)})},this)};var Yr=function(t){function e(e){this.source=e,t.call(this)}function n(t){this.o=t,this.isStopped=!1}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t))},n.prototype.onNext=Vt,n.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.o.onError(t))},n.prototype.onCompleted=function(){this.isStopped||(this.isStopped=!0,this.o.onCompleted())},n.prototype.dispose=function(){this.isStopped=!0},n.prototype.fail=function(t){return this.isStopped?!1:(this.isStopped=!0,this.observer.onError(t),!0)},e}(In);qn.ignoreElements=function(){return new Yr(this)};var Zr=function(t){function e(e,n){this.source=e,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new to(t))},e}(In),to=function(t){function e(e){this._o=e,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._o.onNext(Dn(t))},e.prototype.error=function(t){this._o.onNext(Sn(t)),this._o.onCompleted()},e.prototype.completed=function(){this._o.onNext(An()),this._o.onCompleted()},e}(Tn);qn.materialize=function(){return new Zr(this)},qn.repeat=function(t){return Hn(this,t).concat()},qn.retry=function(t){return Hn(this,t).catchError()},qn.retryWhen=function(t){return Hn(this).catchErrorWhen(t)};var eo=function(t){function e(e,n,r,o){this.source=e,this.accumulator=n,this.hasSeed=r,this.seed=o,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new no(t,this))},e}(In),no=function(t){function e(e,n){this._o=e,this._p=n,this._fn=n.accumulator,this._hs=n.hasSeed,this._s=n.seed,this._ha=!1,this._a=null,this._hv=!1,this._i=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){return!this._hv&&(this._hv=!0),this._ha?this._a=Yt(this._fn)(this._a,t,this._i,this._p):(this._a=this._hs?Yt(this._fn)(this._s,t,this._i,this._p):t,this._ha=!0),this._a===Xt?this._o.onError(this._a.e):(this._o.onNext(this._a),void this._i++)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){!this._hv&&this._hs&&this._o.onNext(this._s),this._o.onCompleted()},e}(Tn);qn.scan=function(){var t,e=!1,n=arguments[0];return 2===arguments.length&&(e=!0,t=arguments[1]),new eo(this,n,e,t)};var ro=function(t){function e(e,n){this.source=e,this._c=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new oo(t,this._c))},e}(In),oo=function(t){function e(e,n){this._o=e,this._c=n,this._q=[],t.call(this)}return ze(e,t),e.prototype.next=function(t){this._q.push(t),this._q.length>this._c&&this._o.onNext(this._q.shift())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.skipLast=function(t){if(0>t)throw new se;return new ro(this,t)},qn.startWith=function(){var t,e=0;arguments.length&&hn(arguments[0])?(t=arguments[0],e=1):t=dn;for(var n=[],r=e,o=arguments.length;o>r;r++)n.push(arguments[r]);return Jn([hr(n,t),this]).concat()};var io=function(t){function e(e,n){this._o=e,this._c=n,this._q=[],t.call(this)}return ze(e,t),e.prototype.next=function(t){this._q.push(t),this._q.length>this._c&&this._q.shift()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){for(;this._q.length>0;)this._o.onNext(this._q.shift());this._o.onCompleted()},e}(Tn);qn.takeLast=function(t){if(0>t)throw new se;var e=this;return new Xi(function(n){return e.subscribe(new io(n,t))},e)};var so=function(t){function e(e,n){this._o=e,this._c=n,this._q=[],t.call(this)}return ze(e,t),e.prototype.next=function(t){this._q.push(t),this._q.length>this._c&&this._q.shift()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._q),this._o.onCompleted()},e}(Tn);qn.takeLastBuffer=function(t){if(0>t)throw new se;var e=this;return new Xi(function(n){return e.subscribe(new so(n,t))},e)},qn.windowWithCount=function(t,e){var n=this;if(+t||(t=0),Math.abs(t)===1/0&&(t=0),0>=t)throw new se;if(null==e&&(e=t),+e||(e=0),Math.abs(e)===1/0&&(e=0),0>=e)throw new se;return new Xi(function(r){function o(){var t=new es;c.push(t),r.onNext(Ve(t,s))}var i=new tn,s=new on(i),u=0,c=[];return o(),i.setDisposable(n.subscribe(function(n){for(var r=0,i=c.length;i>r;r++)c[r].onNext(n);var s=u-t+1;s>=0&&s%e===0&&c.shift().onCompleted(),++u%e===0&&o()},function(t){for(;c.length>0;)c.shift().onError(t);r.onError(t)},function(){for(;c.length>0;)c.shift().onCompleted();r.onCompleted()})),s},n)},qn.selectConcat=qn.concatMap=function(t,e,n){return Gt(t)&&Gt(e)?this.concatMap(function(n,r){var o=t(n,r);return $t(o)&&(o=Xn(o)),(le(o)||fe(o))&&(o=ur(o)),o.map(function(t,o){return e(n,t,r,o)})}):Gt(t)?H(this,t,n):H(this,function(){return t})},qn.concatMapObserver=qn.selectConcatObserver=function(t,e,n,r){var o=this,i=ve(t,r,2),s=ve(e,r,1),u=ve(n,r,0);return new Xi(function(t){var e=0;return o.subscribe(function(n){var r;try{r=i(n,e++)}catch(o){return void t.onError(o)}$t(r)&&(r=Xn(r)),t.onNext(r)},function(e){var n;try{n=s(e)}catch(r){return void t.onError(r)}$t(n)&&(n=Xn(n)),t.onNext(n),t.onCompleted()},function(){var e;try{e=u()}catch(n){return void t.onError(n)}$t(e)&&(e=Xn(e)),t.onNext(e),t.onCompleted()})},this).concatAll()};var uo=function(t){function e(e,n){this._o=e,this._d=n,this._f=!1,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._f=!0,this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){!this._f&&this._o.onNext(defaultValue),this._o.onCompleted()},e}(Tn);qn.defaultIfEmpty=function(t){var e=this;return t===s&&(t=null),new Xi(function(n){return e.subscribe(new uo(n,t))},e)},J.prototype.push=function(t){var e=-1===K(this.set,t,this.comparer);return e&&this.set.push(t),e};var co=function(t){function e(e,n,r){this.source=e,this._keyFn=n,this._cmpFn=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new ho(t,this._keyFn,this._cmpFn))},e}(In),ho=function(t){function e(e,n,r){this._o=e,this._keyFn=n,this._h=new J(r),t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=t;return Gt(this._keyFn)&&(e=Yt(this._keyFn)(t),e===Xt)?this._o.onError(e.e):void(this._h.push(e)&&this._o.onNext(t))},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.distinct=function(t,e){return e||(e=Kt),new co(this,t,e)},qn.groupBy=function(t,e){return this.groupByUntil(t,e,lr)},qn.groupByUntil=function(t,e,n){var r=this;return new Xi(function(o){var i=new yi,u=new Ke,c=new on(u),h=function(t){return function(e){e.onError(t)}};return u.add(r.subscribe(function(r){var a=Yt(t)(r);if(a===Xt)return i.forEach(h(a.e)),o.onError(a.e);var p=!1,f=i.get(a);if(f===s&&(f=new es,i.set(a,f),p=!0),p){var l=new ts(a,f,c),d=new ts(a,f),v=Yt(n)(d);if(v===Xt)return i.forEach(h(v.e)),o.onError(v.e);o.onNext(l);var b=new tn;u.add(b),b.setDisposable(v.take(1).subscribe(Vt,function(t){i.forEach(h(t)),o.onError(t)},function(){i["delete"](a)&&f.onCompleted(),u.remove(b)}))}var _=r;return Gt(e)&&(_=Yt(e)(r),_===Xt)?(i.forEach(h(_.e)),o.onError(_.e)):void f.onNext(_)},function(t){i.forEach(h(t)),o.onError(t)},function(){i.forEach(function(t){t.onCompleted()}),o.onCompleted()})),c},r)};var ao=function(t){function e(e,n,r){this.source=e,this.selector=ve(n,r,3),t.call(this)}function n(t,e){return function(n,r,o){return t.call(this,e.selector(n,r,o),r,o)}}function r(t,e,n){this.o=t,this.selector=e,this.source=n,this.i=0,Tn.call(this)}return ze(e,t),e.prototype.internalMap=function(t,r){return new e(this.source,n(t,this),r)},e.prototype.subscribeCore=function(t){return this.source.subscribe(new r(t,this.selector,this))},ze(r,Tn),r.prototype.next=function(t){var e=Yt(this.selector)(t,this.i++,this.source);return e===Xt?this.o.onError(e.e):void this.o.onNext(e)},r.prototype.error=function(t){this.o.onError(t)},r.prototype.completed=function(){this.o.onCompleted()},e}(In);qn.map=qn.select=function(t,e){var n="function"==typeof t?t:function(){return t};return this instanceof ao?this.internalMap(n,e):new ao(this,n,e)},qn.pluck=function(){var t=arguments.length,e=new Array(t);if(0===t)throw new Error("List of properties cannot be empty.");for(var n=0;t>n;n++)e[n]=arguments[n];return this.map(Q(e,t))},qn.flatMap=qn.selectMany=function(t,e,n){return new Wn(this,t,e,n).mergeAll()},qn.flatMapObserver=qn.selectManyObserver=function(t,e,n,r){var o=this;return new Xi(function(i){var s=0;return o.subscribe(function(e){var n;try{n=t.call(r,e,s++)}catch(o){return void i.onError(o)}$t(n)&&(n=Xn(n)),i.onNext(n)},function(t){var n;try{n=e.call(r,t)}catch(o){return void i.onError(o)}$t(n)&&(n=Xn(n)),i.onNext(n),i.onCompleted()},function(){var t;try{t=n.call(r)}catch(e){return void i.onError(e)}$t(t)&&(t=Xn(t)),i.onNext(t),i.onCompleted()})},o).mergeAll()},Bt.Observable.prototype.flatMapLatest=function(t,e,n){return new Wn(this,t,e,n).switchLatest()};var po=function(t){function e(e,n){this.source=e,this.skipCount=n,t.call(this)}function n(t,e){this.c=e,this.r=e,this.o=t,this.isStopped=!1}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this.skipCount))},n.prototype.onNext=function(t){this.isStopped||(this.r<=0?this.o.onNext(t):this.r--)},n.prototype.onError=function(t){this.isStopped||(this.isStopped=!0,this.o.onError(t))},n.prototype.onCompleted=function(){this.isStopped||(this.isStopped=!0,this.o.onCompleted())},n.prototype.dispose=function(){this.isStopped=!0},n.prototype.fail=function(t){return this.isStopped?!1:(this.isStopped=!0,this.o.onError(t),!0)},e}(In);qn.skip=function(t){if(0>t)throw new se;return new po(this,t)};var fo=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new lo(t,this))},e}(In),lo=function(t){function e(e,n){this._o=e,this._p=n,this._i=0,this._r=!1,t.call(this)}return ze(e,t),e.prototype.next=function(t){if(!this._r){var e=Yt(this._p._fn)(t,this._i++,this._p);if(e===Xt)return this._o.onError(e.e);this._r=!e}this._r&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.skipWhile=function(t,e){var n=ve(t,e,3);return new fo(this,n)};var vo=function(t){function e(e,n){this.source=e,this.takeCount=n,t.call(this)}function n(t,e){this.o=t,this.c=e,this.r=e,this.isStopped=!1}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new n(t,this.takeCount))},n.prototype={onNext:function(t){this.isStopped||this.r-->0&&(this.o.onNext(t),this.r<=0&&this.o.onCompleted())},onError:function(t){this.isStopped||(this.isStopped=!0,this.o.onError(t))},onCompleted:function(){this.isStopped||(this.isStopped=!0,this.o.onCompleted())},dispose:function(){this.isStopped=!0},fail:function(t){return this.isStopped?!1:(this.isStopped=!0,this.o.onError(t),!0)}},e}(In);qn.take=function(t,e){if(0>t)throw new se;return 0===t?rr(e):new vo(this,t)};var bo=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new _o(t,this))},e}(In),_o=function(t){function e(e,n){this._o=e,this._p=n,this._i=0,this._r=!0,t.call(this)}return ze(e,t),e.prototype.next=function(t){return this._r&&(this._r=Yt(this._p._fn)(t,this._i++,this._p),this._r===Xt)?this._o.onError(this._r.e):void(this._r?this._o.onNext(t):this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.takeWhile=function(t,e){var n=ve(t,e,3);return new bo(this,n)};var mo=function(t){function e(e,n,r){this.source=e,this.predicate=ve(n,r,3),t.call(this)}function n(t,e){return function(n,r,o){return e.predicate(n,r,o)&&t.call(this,n,r,o)}}function r(t,e,n){this.o=t,this.predicate=e,this.source=n,this.i=0,Tn.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new r(t,this.predicate,this))},e.prototype.internalFilter=function(t,r){return new e(this.source,n(t,this),r)},ze(r,Tn),r.prototype.next=function(t){var e=Yt(this.predicate)(t,this.i++,this.source);return e===Xt?this.o.onError(e.e):void(e&&this.o.onNext(t))},r.prototype.error=function(t){this.o.onError(t)},r.prototype.completed=function(){this.o.onCompleted()},e}(In);qn.filter=qn.where=function(t,e){return this instanceof mo?this.internalFilter(t,e):new mo(this,t,e)};var yo=function(t){function e(e,n,r){this.source=e,this._k=n,this._c=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new wo(t,this._k,this._c))},e}(In),wo=function(t){function e(e,n,r){this._o=e,this._k=n,this._c=r,this._v=null,this._hv=!1,this._l=[],t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=Yt(this._k)(t);if(e===Xt)return this._o.onError(e.e);var n=0;if(this._hv){if(n=Yt(this._c)(e,this._v),n===Xt)return this._o.onError(n.e)}else this._hv=!0,this._v=e;n>0&&(this._v=e,this._l=[]),n>=0&&this._l.push(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._l),this._o.onCompleted()},e}(Tn),go=function(t){function e(e,n,r,o){this.source=e,this.accumulator=n,this.hasSeed=r,this.seed=o,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Eo(t,this))},e}(In),Eo=function(t){function e(e,n){this._o=e,this._p=n,this._fn=n.accumulator,this._hs=n.hasSeed,this._s=n.seed,this._ha=!1,this._a=null,this._hv=!1,this._i=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){return!this._hv&&(this._hv=!0),this._ha?this._a=Yt(this._fn)(this._a,t,this._i,this._p):(this._a=this._hs?Yt(this._fn)(this._s,t,this._i,this._p):t,this._ha=!0),this._a===Xt?this._o.onError(this._a.e):void this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._hv&&this._o.onNext(this._a),!this._hv&&this._hs&&this._o.onNext(this._s),!this._hv&&!this._hs&&this._o.onError(new oe),this._o.onCompleted()},e}(Tn);qn.reduce=function(){var t,e=!1,n=arguments[0];return 2===arguments.length&&(e=!0,t=arguments[1]),new go(this,n,e,t)};var Co=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new xo(t,this._fn,this.source))},e}(In),xo=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=Yt(this._fn)(t,this._i++,this._s);return e===Xt?this._o.onError(e.e):void(Boolean(e)&&(this._o.onNext(!0),this._o.onCompleted()))},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!1),this._o.onCompleted()},e}(Tn);qn.some=function(t,e){var n=ve(t,e,3);return new Co(this,n)};var No=function(t){function e(e){this.source=e,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Oo(t))},e}(In),Oo=function(t){function e(e){this._o=e,t.call(this)}return ze(e,t),e.prototype.next=function(){this._o.onNext(!1),this._o.onCompleted()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!0),this._o.onCompleted()},e}(Tn);qn.isEmpty=function(){return new No(this)};var Do=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new So(t,this._fn,this.source))},e}(In),So=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=Yt(this._fn)(t,this._i++,this._s);return e===Xt?this._o.onError(e.e):void(Boolean(e)||(this._o.onNext(!1),this._o.onCompleted()))},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!0),this._o.onCompleted()},e}(Tn);qn.every=function(t,e){var n=ve(t,e,3);return new Do(this,n)};var Ao=function(t){function e(e,n,r){var o=+r||0;Math.abs(o)===1/0&&(o=0),this.source=e,this._elem=n,this._n=o,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this._n<0?(t.onNext(!1),t.onCompleted(),Ge):this.source.subscribe(new jo(t,this._elem,this._n))},e}(In),jo=function(t){function e(e,n,r){this._o=e,this._elem=n,this._n=r,this._i=0,t.call(this)}function n(t,e){return 0===t&&0===e||t===e||isNaN(t)&&isNaN(e)}return ze(e,t),e.prototype.next=function(t){this._i++>=this._n&&n(t,this._elem)&&(this._o.onNext(!0),this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(!1),this._o.onCompleted()},e}(Tn);qn.includes=function(t,e){return new Ao(this,t,e)};var ko=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new qo(t,this._fn,this.source))},e}(In),qo=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,this._c=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){if(this._fn){var e=Yt(this._fn)(t,this._i++,this._s);if(e===Xt)return this._o.onError(e.e);
Boolean(e)&&this._c++}else this._c++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._c),this._o.onCompleted()},e}(Tn);qn.count=function(t,e){var n=ve(t,e,3);return new ko(this,n)};var To=function(t){function e(e,n,r){this.source=e,this._e=n,this._n=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this._n<0?(t.onNext(-1),t.onCompleted(),Ge):this.source.subscribe(new Po(t,this._e,this._n))},e}(In),Po=function(t){function e(e,n,r){this._o=e,this._e=n,this._n=r,this._i=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._i>=this._n&&t===this._e&&(this._o.onNext(this._i),this._o.onCompleted()),this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(-1),this._o.onCompleted()},e}(Tn);qn.indexOf=function(t,e){var n=+e||0;return Math.abs(n)===1/0&&(n=0),new To(this,t,n)};var Fo=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Ro(t,this._fn,this.source))},e}(In),Ro=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._i=0,this._c=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){if(this._fn){var e=Yt(this._fn)(t,this._i++,this._s);if(e===Xt)return this._o.onError(e.e);this._c+=e}else this._c+=t},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._c),this._o.onCompleted()},e}(Tn);qn.sum=function(t,e){var n=ve(t,e,3);return new Fo(this,n)},qn.minBy=function(t,e){return e||(e=Jt),new yo(this,t,function(t,n){return-1*e(t,n)})},qn.min=function(t){return this.minBy(Ut,t).map(function(t){return $(t)})},qn.maxBy=function(t,e){return e||(e=Jt),new yo(this,t,e)},qn.max=function(t){return this.maxBy(Ut,t).map(function(t){return $(t)})};var Mo=function(t){function e(e,n){this.source=e,this._fn=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Lo(t,this._fn,this.source))},e}(In),Lo=function(t){function e(e,n,r){this._o=e,this._fn=n,this._s=r,this._c=0,this._t=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){if(this._fn){var e=Yt(this._fn)(t,this._c++,this._s);if(e===Xt)return this._o.onError(e.e);this._t+=e}else this._c++,this._t+=t},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){return 0===this._c?this._o.onError(new oe):(this._o.onNext(this._t/this._c),void this._o.onCompleted())},e}(Tn);qn.average=function(t,e){var n,r=this;return Gt(t)&&(n=ve(t,e,3)),new Mo(r,n)},qn.sequenceEqual=function(t,e){var n=this;return e||(e=Kt),new Xi(function(r){var o=!1,i=!1,s=[],u=[],c=n.subscribe(function(t){if(u.length>0){var n=u.shift(),o=Yt(e)(n,t);if(o===Xt)return r.onError(o.e);o||(r.onNext(!1),r.onCompleted())}else i?(r.onNext(!1),r.onCompleted()):s.push(t)},function(t){r.onError(t)},function(){o=!0,0===s.length&&(u.length>0?(r.onNext(!1),r.onCompleted()):i&&(r.onNext(!0),r.onCompleted()))});(le(t)||fe(t))&&(t=ur(t)),$t(t)&&(t=Xn(t));var h=t.subscribe(function(t){if(s.length>0){var n=s.shift(),i=Yt(e)(n,t);if(i===Xt)return r.onError(i.e);i||(r.onNext(!1),r.onCompleted())}else o?(r.onNext(!1),r.onCompleted()):u.push(t)},function(t){r.onError(t)},function(){i=!0,0===u.length&&(s.length>0?(r.onNext(!1),r.onCompleted()):o&&(r.onNext(!0),r.onCompleted()))});return new nn(c,h)},n)};var Io=function(t){function e(e,n,r){this.source=e,this._i=n,this._d=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Wo(t,this._i,this._d))},e}(In),Wo=function(t){function e(e,n,r){this._o=e,this._i=n,this._d=r,t.call(this)}return ze(e,t),e.prototype.next=function(t){0===this._i--&&(this._o.onNext(t),this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._d===s?this._o.onError(new se):(this._o.onNext(this._d),this._o.onCompleted())},e}(Tn);qn.elementAt=function(t,e){if(0>t)throw new se;return new Io(this,t,e)};var zo=function(t){function e(e,n,r){this._o=e,this._obj=n,this._s=r,this._i=0,this._hv=!1,this._v=null,t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=!1;if(this._obj.predicate){var n=Yt(this._obj.predicate)(t,this._i++,this._s);if(n===Xt)return this._o.onError(n.e);Boolean(n)&&(e=!0)}else this._obj.predicate||(e=!0);if(e){if(this._hv)return this._o.onError(new Error("Sequence contains more than one matching element"));this._hv=!0,this._v=t}},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._hv?(this._o.onNext(this._v),this._o.onCompleted()):this._obj.defaultValue===s?this._o.onError(new oe):(this._o.onNext(this._obj.defaultValue),this._o.onCompleted())},e}(Tn);qn.single=function(t,e){var n={},r=this;if(n="object"==typeof arguments[0]?arguments[0]:{predicate:arguments[0],thisArg:arguments[1],defaultValue:arguments[2]},Gt(n.predicate)){var o=n.predicate;n.predicate=ve(o,n.thisArg,3)}return new Xi(function(t){return r.subscribe(new zo(t,n,r))},r)};var Bo=function(t){function e(e,n){this.source=e,this._obj=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Vo(t,this._obj,this.source))},e}(In),Vo=function(t){function e(e,n,r){this._o=e,this._obj=n,this._s=r,this._i=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){if(this._obj.predicate){var e=Yt(this._obj.predicate)(t,this._i++,this._s);if(e===Xt)return this._o.onError(e.e);Boolean(e)&&(this._o.onNext(t),this._o.onCompleted())}else this._obj.predicate||(this._o.onNext(t),this._o.onCompleted())},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._obj.defaultValue===s?this._o.onError(new oe):(this._o.onNext(this._obj.defaultValue),this._o.onCompleted())},e}(Tn);qn.first=function(){var t={};if(t="object"==typeof arguments[0]?arguments[0]:{predicate:arguments[0],thisArg:arguments[1],defaultValue:arguments[2]},Gt(t.predicate)){var e=t.predicate;t.predicate=ve(e,t.thisArg,3)}return new Bo(this,t)};var Uo=function(t){function e(e,n){this.source=e,this._obj=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Ho(t,this._obj,this.source))},e}(In),Ho=function(t){function e(e,n,r){this._o=e,this._obj=n,this._s=r,this._i=0,this._hv=!1,this._v=null,t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=!1;if(this._obj.predicate){var n=Yt(this._obj.predicate)(t,this._i++,this._s);if(n===Xt)return this._o.onError(n.e);Boolean(n)&&(e=!0)}else this._obj.predicate||(e=!0);e&&(this._hv=!0,this._v=t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._hv?(this._o.onNext(this._v),this._o.onCompleted()):this._obj.defaultValue===s?this._o.onError(new oe):(this._o.onNext(this._obj.defaultValue),this._o.onCompleted())},e}(Tn);qn.last=function(){var t={};if(t="object"==typeof arguments[0]?arguments[0]:{predicate:arguments[0],thisArg:arguments[1],defaultValue:arguments[2]},Gt(t.predicate)){var e=t.predicate;t.predicate=ve(e,t.thisArg,3)}return new Uo(this,t)};var Ko=function(t){function e(e,n,r,o){this._o=e,this._s=n,this._cb=r,this._y=o,this._i=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=Yt(this._cb)(t,this._i,this._s);return e===Xt?this._o.onError(e.e):void(e?(this._o.onNext(this._y?this._i:t),this._o.onCompleted()):this._i++)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._y&&this._o.onNext(-1),this._o.onCompleted()},e}(Tn);qn.find=function(t,e){return G(this,t,e,!1)},qn.findIndex=function(t,e){return G(this,t,e,!0)};var Jo=function(t){function e(e){this.source=e,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Qo(t))},e}(In),Qo=function(t){function e(e){this._o=e,this._s=new zt.Set,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._s.add(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._s),this._o.onCompleted()},e}(Tn);qn.toSet=function(){if("undefined"==typeof zt.Set)throw new TypeError;return new Jo(this)};var $o=function(t){function e(e,n,r){this.source=e,this._k=n,this._e=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Go(t,this._k,this._e))},e}(In),Go=function(t){function e(e,n,r){this._o=e,this._k=n,this._e=r,this._m=new zt.Map,t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=Yt(this._k)(t);if(e===Xt)return this._o.onError(e.e);var n=t;return this._e&&(n=Yt(this._e)(t),n===Xt)?this._o.onError(n.e):void this._m.set(e,n)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onNext(this._m),this._o.onCompleted()},e}(Tn);qn.toMap=function(t,e){if("undefined"==typeof zt.Map)throw new TypeError;return new $o(this,t,e)};var Xo=function(t){function e(e,n,r){this.source=e,this._b=n,this._e=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Yo(t,this._b,this._e))},e}(In),Yo=function(t){function e(e,n,r){this._o=e,this._b=n,this._e=r,this._i=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._i>=this._b&&(this._e===this._i?this._o.onCompleted():this._o.onNext(t)),this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.slice=function(t,e){var n=t||0;if(0>n)throw new Bt.ArgumentOutOfRangeError;if("number"==typeof e&&n>e)throw new Bt.ArgumentOutOfRangeError;return new Xo(this,n,e)};var Zo=function(t){function e(e,n,r){this.source=e,this._e=n,this._n=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this._n<0?(t.onNext(-1),t.onCompleted(),Ge):this.source.subscribe(new ti(t,this._e,this._n))},e}(In),ti=function(t){function e(e,n,r){this._o=e,this._e=n,this._n=r,this._v=0,this._hv=!1,this._i=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._i>=this._n&&t===this._e&&(this._hv=!0,this._v=this._i),this._i++},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._hv?this._o.onNext(this._v):this._o.onNext(-1),this._o.onCompleted()},e}(Tn);qn.lastIndexOf=function(t,e){var n=+e||0;return Math.abs(n)===1/0&&(n=0),new Zo(this,t,n)},Ln.wrap=function(t){function e(){return Ln.spawn.call(this,t.apply(this,arguments))}return e.__generatorFunction__=t,e};var ei=Ln.spawn=function(){for(var t=arguments[0],e=this,n=[],r=1,o=arguments.length;o>r;r++)n.push(arguments[r]);return new Xi(function(r){function o(e){var n=Yt(t.next).call(t,e);return n===Xt?r.onError(n.e):void s(n)}function i(e){var n=Yt(t.next).call(t,e);return n===Xt?r.onError(n.e):void s(n)}function s(t){if(t.done)return r.onNext(t.value),void r.onCompleted();var n=X.call(e,t.value);Ln.isObservable(n)?u.add(n.subscribe(o,i)):i(new TypeError("type not supported"))}var u=new Ke;return Gt(t)&&(t=t.apply(e,n)),t&&Gt(t.next)?(o(),u):(r.onNext(t),r.onCompleted())})};Ln.start=function(t,e,n){return ni(t,e,n)()};var ni=Ln.toAsync=function(t,e,n){return hn(n)||(n=gn),function(){var r=arguments,o=new ns;return n.schedule(null,function(){var n;try{n=t.apply(e,r)}catch(i){return void o.onError(i)}o.onNext(n),o.onCompleted()}),o.asObservable()}};Ln.fromCallback=function(t,e,n){return function(){"undefined"==typeof e&&(e=this);for(var r=arguments.length,o=new Array(r),i=0;r>i;i++)o[i]=arguments[i];return ot(t,e,n,o)}},Ln.fromNodeCallback=function(t,e,n){return function(){"undefined"==typeof e&&(e=this);for(var r=arguments.length,o=new Array(r),i=0;r>i;i++)o[i]=arguments[i];return st(t,e,n,o)}},ct.prototype.dispose=function(){this.isDisposed||(this._e.removeEventListener(this._n,this._fn,!1),this.isDisposed=!0)},Bt.config.useNativeEvents=!1,Ln.fromEvent=function(t,e,n){return t.addListener?ri(function(n){t.addListener(e,n)},function(n){t.removeListener(e,n)},n):Bt.config.useNativeEvents||"function"!=typeof t.on||"function"!=typeof t.off?new Xi(function(r){return ht(t,e,at(r,n))}).publish().refCount():ri(function(n){t.on(e,n)},function(n){t.off(e,n)},n)};var ri=Ln.fromEventPattern=function(t,e,n,r){return hn(r)||(r=dn),new Xi(function(r){function o(){var t=arguments[0];return Gt(n)&&(t=Yt(n).apply(null,arguments),t===Xt)?r.onError(t.e):void r.onNext(t)}var i=t(o);return $e(function(){Gt(e)&&e(o,i)})}).publish().refCount()};Ln.startAsync=function(t){var e=Yt(t)();return e===Xt?wr(e.e):Xn(e)};var oi=function(t){function e(e,n){this.source=e,this.controller=new es,n&&n.subscribe?this.pauser=this.controller.merge(n):this.pauser=this.controller,t.call(this)}return ze(e,t),e.prototype._subscribe=function(t){var e=this.source.publish(),n=e.subscribe(t),r=Ge,o=this.pauser.distinctUntilChanged().subscribe(function(t){t?r=e.connect():(r.dispose(),r=Ge)});return new rn([n,r,o])},e.prototype.pause=function(){this.controller.onNext(!1)},e.prototype.resume=function(){this.controller.onNext(!0)},e}(Ln);qn.pausable=function(t){return new oi(this,t)};var ii=function(t){function e(e,n){this.source=e,this.controller=new es,n&&n.subscribe?this.pauser=this.controller.merge(n):this.pauser=this.controller,t.call(this)}return ze(e,t),e.prototype._subscribe=function(t){function e(){for(;r.length>0;)t.onNext(r.shift())}var n,r=[],o=pt(this.source,this.pauser.startWith(!1).distinctUntilChanged(),function(t,e){return{data:t,shouldFire:e}}).subscribe(function(o){n!==s&&o.shouldFire!==n?(n=o.shouldFire,o.shouldFire&&e()):(n=o.shouldFire,o.shouldFire?t.onNext(o.data):r.push(o.data))},function(n){e(),t.onError(n)},function(){e(),t.onCompleted()});return o},e.prototype.pause=function(){this.controller.onNext(!1)},e.prototype.resume=function(){this.controller.onNext(!0)},e}(Ln);qn.pausableBuffered=function(t){return new ii(this,t)};var si=function(t){function e(e,n,r){t.call(this),this.subject=new ui(n,r),this.source=e.multicast(this.subject).refCount()}return ze(e,t),e.prototype._subscribe=function(t){return this.source.subscribe(t)},e.prototype.request=function(t){return this.subject.request(null==t?-1:t)},e}(Ln),ui=function(t){function e(e,n){null==e&&(e=!0),t.call(this),this.subject=new es,this.enableQueue=e,this.queue=e?[]:null,this.requestedCount=0,this.requestedDisposable=null,this.error=null,this.hasFailed=!1,this.hasCompleted=!1,this.scheduler=n||bn}return ze(e,t),Be(e.prototype,jn,{_subscribe:function(t){return this.subject.subscribe(t)},onCompleted:function(){this.hasCompleted=!0,this.enableQueue&&0!==this.queue.length?this.queue.push(Cn.createOnCompleted()):(this.subject.onCompleted(),this.disposeCurrentRequest())},onError:function(t){this.hasFailed=!0,this.error=t,this.enableQueue&&0!==this.queue.length?this.queue.push(Cn.createOnError(t)):(this.subject.onError(t),this.disposeCurrentRequest())},onNext:function(t){this.requestedCount<=0?this.enableQueue&&this.queue.push(Cn.createOnNext(t)):(0===this.requestedCount--&&this.disposeCurrentRequest(),this.subject.onNext(t))},_processRequest:function(t){if(this.enableQueue)for(;this.queue.length>0&&(t>0||"N"!==this.queue[0].kind);){var e=this.queue.shift();e.accept(this.subject),"N"===e.kind?t--:(this.disposeCurrentRequest(),this.queue=[])}return t},request:function(t){this.disposeCurrentRequest();var e=this;return this.requestedDisposable=this.scheduler.schedule(t,function(t,n){var r=e._processRequest(n),o=e.hasCompleted||e.hasFailed;return!o&&r>0?(e.requestedCount=r,$e(function(){e.requestedCount=0})):void 0}),this.requestedDisposable},disposeCurrentRequest:function(){this.requestedDisposable&&(this.requestedDisposable.dispose(),this.requestedDisposable=null)}}),e}(Ln);qn.controlled=function(t,e){return t&&hn(t)&&(e=t,t=!0),null==t&&(t=!0),new si(this,t,e)};var ci=function(t){function e(e){t.call(this),this.source=e}function n(t,e){e.source.request(1)}ze(e,t),e.prototype._subscribe=function(t){return this.subscription=this.source.subscribe(new r(t,this,this.subscription)),new nn(this.subscription,gn.schedule(this,n))};var r=function(t){function n(e,n,r){t.call(this),this.observer=e,this.observable=n,this.cancel=r,this.scheduleDisposable=null}function r(t,e){e.observable.source.request(1)}return ze(n,t),n.prototype.completed=function(){this.observer.onCompleted(),this.dispose()},n.prototype.error=function(t){this.observer.onError(t),this.dispose()},n.prototype.next=function(t){this.observer.onNext(t),this.scheduleDisposable=gn.schedule(this,r)},e.dispose=function(){this.observer=null,this.cancel&&(this.cancel.dispose(),this.cancel=null),this.scheduleDisposable&&(this.scheduleDisposable.dispose(),this.scheduleDisposable=null),t.prototype.dispose.call(this)},n}(Tn);return e}(Ln);si.prototype.stopAndWait=function(){return new ci(this)};var hi=function(t){function e(e,n){t.call(this),this.source=e,this.windowSize=n}function n(t,e){e.source.request(e.windowSize)}ze(e,t),e.prototype._subscribe=function(t){return this.subscription=this.source.subscribe(new r(t,this,this.subscription)),new nn(this.subscription,gn.schedule(this,n))};var r=function(t){function e(e,n,r){this.observer=e,this.observable=n,this.cancel=r,this.received=0,this.scheduleDisposable=null,t.call(this)}function n(t,e){e.observable.source.request(e.observable.windowSize)}return ze(e,t),e.prototype.completed=function(){this.observer.onCompleted(),this.dispose()},e.prototype.error=function(t){this.observer.onError(t),this.dispose()},e.prototype.next=function(t){this.observer.onNext(t),this.received=++this.received%this.observable.windowSize,0===this.received&&(this.scheduleDisposable=gn.schedule(this,n))},e.prototype.dispose=function(){this.observer=null,this.cancel&&(this.cancel.dispose(),this.cancel=null),this.scheduleDisposable&&(this.scheduleDisposable.dispose(),this.scheduleDisposable=null),t.prototype.dispose.call(this)},e}(Tn);return e}(Ln);si.prototype.windowed=function(t){return new hi(this,t)},qn.pipe=function(t){function e(){n.resume()}var n=this.pausableBuffered();return t.addListener("drain",e),n.subscribe(function(e){!t.write(String(e))&&n.pause()},function(e){t.emit("error",e)},function(){!t._isStdio&&t.end(),t.removeListener("drain",e)}),n.resume(),t};var ai=function(t){function e(e,n,r){this.source=e,this._fn1=n,this._fn2=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=this.source.multicast(this._fn1());return new nn(this._fn2(e).subscribe(t),e.connect())},e}(In);qn.multicast=function(t,e){return Gt(t)?new ai(this,t,e):new vi(this,t)},qn.publish=function(t){return t&&Gt(t)?this.multicast(function(){return new es},t):this.multicast(new es)},qn.share=function(){return this.publish().refCount()},qn.publishLast=function(t){return t&&Gt(t)?this.multicast(function(){return new ns},t):this.multicast(new ns)},qn.publishValue=function(t,e){return 2===arguments.length?this.multicast(function(){return new fi(e)},t):this.multicast(new fi(t))},qn.shareValue=function(t){return this.publishValue(t).refCount()},qn.replay=function(t,e,n,r){return t&&Gt(t)?this.multicast(function(){return new li(e,n,r)},t):this.multicast(new li(e,n,r))},qn.shareReplay=function(t,e,n){return this.replay(null,t,e,n).refCount()};var pi=function(t,e){this._s=t,this._o=e};pi.prototype.dispose=function(){if(!this._s.isDisposed&&null!==this._o){var t=this._s.observers.indexOf(this._o);this._s.observers.splice(t,1),this._o=null}};var fi=Bt.BehaviorSubject=function(t){function e(e){t.call(this),this.value=e,this.observers=[],this.isDisposed=!1,this.isStopped=!1,this.hasError=!1}return ze(e,t),Be(e.prototype,jn,{_subscribe:function(t){return Ye(this),this.isStopped?(this.hasError?t.onError(this.error):t.onCompleted(),Ge):(this.observers.push(t),t.onNext(this.value),new pi(this,t))},getValue:function(){if(Ye(this),this.hasError)throw this.error;return this.value},hasObservers:function(){return this.observers.length>0},onCompleted:function(){if(Ye(this),!this.isStopped){this.isStopped=!0;for(var t=0,e=u(this.observers),n=e.length;n>t;t++)e[t].onCompleted();this.observers.length=0}},onError:function(t){if(Ye(this),!this.isStopped){this.isStopped=!0,this.hasError=!0,this.error=t;for(var e=0,n=u(this.observers),r=n.length;r>e;e++)n[e].onError(t);this.observers.length=0}},onNext:function(t){if(Ye(this),!this.isStopped){this.value=t;for(var e=0,n=u(this.observers),r=n.length;r>e;e++)n[e].onNext(t)}},dispose:function(){this.isDisposed=!0,this.observers=null,this.value=null,this.error=null}}),e}(Ln),li=Bt.ReplaySubject=function(t){function e(t,e){return $e(function(){e.dispose(),!t.isDisposed&&t.observers.splice(t.observers.indexOf(e),1)})}function n(e,n,o){this.bufferSize=null==e?r:e,this.windowSize=null==n?r:n,this.scheduler=o||bn,this.q=[],this.observers=[],this.isStopped=!1,this.isDisposed=!1,this.hasError=!1,this.error=null,t.call(this)}var r=Math.pow(2,53)-1;return ze(n,t),Be(n.prototype,jn.prototype,{_subscribe:function(t){Ye(this);var n=new Rn(this.scheduler,t),r=e(this,n);this._trim(this.scheduler.now()),this.observers.push(n);for(var o=0,i=this.q.length;i>o;o++)n.onNext(this.q[o].value);return this.hasError?n.onError(this.error):this.isStopped&&n.onCompleted(),n.ensureActive(),r},hasObservers:function(){return this.observers.length>0},_trim:function(t){for(;this.q.length>this.bufferSize;)this.q.shift();for(;this.q.length>0&&t-this.q[0].interval>this.windowSize;)this.q.shift()},onNext:function(t){if(Ye(this),!this.isStopped){var e=this.scheduler.now();this.q.push({interval:e,value:t}),this._trim(e);for(var n=0,r=u(this.observers),o=r.length;o>n;n++){var i=r[n];i.onNext(t),i.ensureActive()}}},onError:function(t){if(Ye(this),!this.isStopped){this.isStopped=!0,this.error=t,this.hasError=!0;var e=this.scheduler.now();this._trim(e);for(var n=0,r=u(this.observers),o=r.length;o>n;n++){var i=r[n];i.onError(t),i.ensureActive()}this.observers.length=0}},onCompleted:function(){if(Ye(this),!this.isStopped){this.isStopped=!0;var t=this.scheduler.now();this._trim(t);for(var e=0,n=u(this.observers),r=n.length;r>e;e++){var o=n[e];o.onCompleted(),o.ensureActive()}this.observers.length=0}},dispose:function(){this.isDisposed=!0,this.observers=null}}),n}(Ln),di=function(t){function e(e){this.source=e,this._count=0,this._connectableSubscription=null,t.call(this)}function n(t,e){this._p=t,this._s=e,this.isDisposed=!1}return ze(e,t),e.prototype.subscribeCore=function(t){var e=1===++this._count,r=this.source.subscribe(t);return e&&(this._connectableSubscription=this.source.connect()),new n(this,r)},n.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._s.dispose(),0===--this._p._count&&this._p._connectableSubscription.dispose())},e}(In),vi=Bt.ConnectableObservable=function(t){function e(e,n){this.source=e,this._hasSubscription=!1,this._subscription=null,this._sourceObservable=e.asObservable(),this._subject=n,t.call(this)}function n(t){this._p=t,this.isDisposed=!1}return ze(e,t),n.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._p._hasSubscription=!1)},e.prototype.connect=function(){return this._hasSubscription||(this._hasSubscription=!0,this._subscription=new nn(this._sourceObservable.subscribe(this._subject),new n(this))),this._subscription},e.prototype._subscribe=function(t){return this._subject.subscribe(t)},e.prototype.refCount=function(){return new di(this)},e}(Ln);qn.singleInstance=function(){function t(){return r||(r=!0,e=n["finally"](function(){r=!1}).publish().refCount()),e}var e,n=this,r=!1;return new Xi(function(e){return t().subscribe(e)})},qn.join=function(t,e,n,r){var o=this;return new Xi(function(i){var s=new Ke,u=!1,c=!1,h=0,a=0,p=new yi,f=new yi,l=function(t){i.onError(t)};return s.add(o.subscribe(function(t){var n=h++,o=new tn;p.set(n,t),s.add(o);var c=Yt(e)(t);return c===Xt?i.onError(c.e):(o.setDisposable(c.take(1).subscribe(Vt,l,function(){p["delete"](n)&&0===p.size&&u&&i.onCompleted(),s.remove(o)})),void f.forEach(function(e){var n=Yt(r)(t,e);return n===Xt?i.onError(n.e):void i.onNext(n)}))},l,function(){u=!0,(c||0===p.size)&&i.onCompleted()})),s.add(t.subscribe(function(t){var e=a++,o=new tn;f.set(e,t),s.add(o);var u=Yt(n)(t);return u===Xt?i.onError(u.e):(o.setDisposable(u.take(1).subscribe(Vt,l,function(){f["delete"](e)&&0===f.size&&c&&i.onCompleted(),s.remove(o)})),void p.forEach(function(e){var n=Yt(r)(e,t);return n===Xt?i.onError(n.e):void i.onNext(n)}))},l,function(){c=!0,(u||0===f.size)&&i.onCompleted()})),s},o)},qn.groupJoin=function(t,e,n,r){var o=this;return new Xi(function(i){function s(t){}var u=new Ke,c=new on(u),h=new yi,a=new yi,p=0,f=0,s=function(t){return function(e){e.onError(t)}};return u.add(o.subscribe(function(t){var n=new es,o=p++;h.set(o,n);var f=Yt(r)(t,Ve(n,c));if(f===Xt)return h.forEach(s(f.e)),i.onError(f.e);i.onNext(f),a.forEach(function(t){n.onNext(t)});var l=new tn;u.add(l);var d=Yt(e)(t);return d===Xt?(h.forEach(s(d.e)),i.onError(d.e)):void l.setDisposable(d.take(1).subscribe(Vt,function(t){h.forEach(s(t)),i.onError(t)},function(){h["delete"](o)&&n.onCompleted(),u.remove(l)}))},function(t){h.forEach(s(t)),i.onError(t)},function(){i.onCompleted()})),u.add(t.subscribe(function(t){var e=f++;a.set(e,t);var r=new tn;u.add(r);var o=Yt(n)(t);return o===Xt?(h.forEach(s(o.e)),i.onError(o.e)):(r.setDisposable(o.take(1).subscribe(Vt,function(t){h.forEach(s(t)),i.onError(t)},function(){a["delete"](e),u.remove(r)})),void h.forEach(function(e){e.onNext(t)}))},function(t){h.forEach(s(t)),i.onError(t)})),c},o)},qn.buffer=function(){return this.window.apply(this,arguments).flatMap(V)},qn.window=function(t,e){return 1===arguments.length&&"function"!=typeof arguments[0]?lt.call(this,t):"function"==typeof t?dt.call(this,t):ft.call(this,t,e)},qn.pairwise=function(){var t=this;return new Xi(function(e){var n,r=!1;return t.subscribe(function(t){r?e.onNext([n,t]):r=!0,n=t},e.onError.bind(e),e.onCompleted.bind(e))},t)},qn.partition=function(t,e){return[this.filter(t,e),this.filter(function(n,r,o){return!t.call(e,n,r,o)})]};var bi=function(t){function e(t,e){this.c=t,this.s=e}return ze(e,t),e.prototype[ae]=function(){var t=this;return{next:function(){return t.c()?{done:!1,value:t.s}:{done:!0,value:void 0}}}},e}(zn);qn.letBind=qn.let=function(t){return t(this)},Ln["if"]=function(t,e,n){return tr(function(){return n||(n=rr()),$t(e)&&(e=Xn(e)),$t(n)&&(n=Xn(n)),"function"==typeof n.now&&(n=rr(n)),t()?e:n})},Ln["for"]=Ln.forIn=function(t,e,n){return Jn(t,e,n).concat()};var _i=Ln["while"]=Ln.whileDo=function(t,e){return $t(e)&&(e=Xn(e)),vt(t,e).concat()};qn.doWhile=function(t){return Ar([this,_i(t,this)])},Ln["case"]=function(t,e,n){return tr(function(){$t(n)&&(n=Xn(n)),n||(n=rr()),hn(n)&&(n=rr(n));var r=e[t()];return $t(r)&&(r=Xn(r)),r||n})},qn.expand=function(t,e){hn(e)||(e=dn);var n=this;return new Xi(function(r){var o=[],i=new en,s=new Ke(i),u=0,c=!1,h=function(){var n=!1;o.length>0&&(n=!c,c=!0),n&&i.setDisposable(e.scheduleRecursive(null,function(e,n){var i;if(!(o.length>0))return void(c=!1);i=o.shift();var a=new tn;s.add(a),a.setDisposable(i.subscribe(function(e){r.onNext(e);var n=null;try{n=t(e)}catch(i){r.onError(i)}o.push(n),u++,h()},function(t){r.onError(t)},function(){s.remove(a),u--,0===u&&r.onCompleted()})),n()}))};return o.push(n),u++,h(),s},this)},Ln.forkJoin=function(){var t=[];if(Array.isArray(arguments[0]))t=arguments[0];else for(var e=0,n=arguments.length;n>e;e++)t.push(arguments[e]);return new Xi(function(e){var n=t.length;if(0===n)return e.onCompleted(),Ge;for(var r=new Ke,o=!1,i=new Array(n),s=new Array(n),u=new Array(n),c=0;n>c;c++)!function(c){var h=t[c];$t(h)&&(h=Xn(h)),r.add(h.subscribe(function(t){o||(i[c]=!0,u[c]=t)},function(t){o=!0,e.onError(t),r.dispose()},function(){if(!o){if(!i[c])return void e.onCompleted();s[c]=!0;for(var t=0;n>t;t++)if(!s[t])return;o=!0,e.onNext(u),e.onCompleted()}}))}(c);return r})},qn.forkJoin=function(t,e){var n=this;return new Xi(function(r){var o,i,s=!1,u=!1,c=!1,h=!1,a=new tn,p=new tn;return $t(t)&&(t=Xn(t)),a.setDisposable(n.subscribe(function(t){c=!0,o=t},function(t){p.dispose(),r.onError(t)},function(){if(s=!0,u)if(c)if(h){var t=Yt(e)(o,i);if(t===Xt)return r.onError(Fe);r.onNext(t),r.onCompleted()}else r.onCompleted();else r.onCompleted()})),p.setDisposable(t.subscribe(function(t){h=!0,i=t},function(t){a.dispose(),r.onError(t)},function(){if(u=!0,s)if(c)if(h){var t=Yt(e)(o,i);if(t===Xt)return r.onError(t.e);r.onNext(t),r.onCompleted()}else r.onCompleted();else r.onCompleted()})),new nn(a,p)},n)},qn.manySelect=qn.extend=function(t,e){hn(e)||(e=dn);var n=this;return tr(function(){var r;return n.map(function(t){var e=new mi(t);return r&&r.onNext(t),r=e,e}).tap(Vt,function(t){r&&r.onError(t)},function(){r&&r.onCompleted()}).observeOn(e).map(t)},n)};var mi=function(t){function e(e){t.call(this),this.head=e,this.tail=new ns}return ze(e,t),Be(e.prototype,jn,{_subscribe:function(t){var e=new Ke;return e.add(bn.schedule(this,function(n,r){t.onNext(r.head),e.add(r.tail.mergeAll().subscribe(t))})),e},onCompleted:function(){this.onNext(Ln.empty())},onError:function(t){this.onNext(Ln["throw"](t))},onNext:function(t){this.tail.onNext(t),this.tail.onCompleted()}}),e}(Ln),yi=zt.Map||function(){function t(){this.size=0,this._values=[],this._keys=[]}return t.prototype["delete"]=function(t){var e=this._keys.indexOf(t);return-1===e?!1:(this._values.splice(e,1),this._keys.splice(e,1),this.size--,!0)},t.prototype.get=function(t){var e=this._keys.indexOf(t);return-1===e?s:this._values[e]},t.prototype.set=function(t,e){var n=this._keys.indexOf(t);return-1===n?(this._keys.push(t),this._values.push(e),this.size++):this._values[n]=e,this},t.prototype.forEach=function(t,e){for(var n=0;n<this.size;n++)t.call(e,this._values[n],this._keys[n])},t}();bt.prototype.and=function(t){return new bt(this.patterns.concat(t))},bt.prototype.thenDo=function(t){return new _t(this,t)},_t.prototype.activate=function(t,e,n){for(var r=this,o=[],i=0,s=this.expression.patterns.length;s>i;i++)o.push(mt(t,this.expression.patterns[i],e.onError.bind(e)));var u=new yt(o,function(){var t;try{t=r.selector.apply(r,arguments)}catch(n){return void e.onError(n)}e.onNext(t)},function(){for(var t=0,e=o.length;e>t;t++)o[t].removeActivePlan(u);n(u)});for(i=0,s=o.length;s>i;i++)o[i].addActivePlan(u);return u},yt.prototype.dequeue=function(){this.joinObservers.forEach(function(t){t.queue.shift()})},yt.prototype.match=function(){var t,e,n=!0;for(t=0,e=this.joinObserverArray.length;e>t;t++)if(0===this.joinObserverArray[t].queue.length){n=!1;break}if(n){var r=[],o=!1;for(t=0,e=this.joinObserverArray.length;e>t;t++)r.push(this.joinObserverArray[t].queue[0]),"C"===this.joinObserverArray[t].queue[0].kind&&(o=!0);if(o)this.onCompleted();else{this.dequeue();var i=[];for(t=0,e=r.length;t<r.length;t++)i.push(r[t].value);this.onNext.apply(this,i)}}};var wi=function(t){function e(e,n){t.call(this),this.source=e,this.onError=n,this.queue=[],this.activePlans=[],this.subscription=new tn,this.isDisposed=!1}ze(e,t);var n=e.prototype;return n.next=function(t){if(!this.isDisposed){if("E"===t.kind)return this.onError(t.error);this.queue.push(t);for(var e=this.activePlans.slice(0),n=0,r=e.length;r>n;n++)e[n].match()}},n.error=Vt,n.completed=Vt,n.addActivePlan=function(t){this.activePlans.push(t)},n.subscribe=function(){this.subscription.setDisposable(this.source.materialize().subscribe(this))},n.removeActivePlan=function(t){this.activePlans.splice(this.activePlans.indexOf(t),1),0===this.activePlans.length&&this.dispose()},n.dispose=function(){t.prototype.dispose.call(this),this.isDisposed||(this.isDisposed=!0,this.subscription.dispose())},e}(Tn);qn.and=function(t){return new bt([this,t])},qn.thenDo=function(t){return new bt([this]).thenDo(t)},Ln.when=function(){var t,e=arguments.length;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}return new Xi(function(e){var n=[],r=new yi,o=kn(function(t){e.onNext(t)},function(t){r.forEach(function(e){e.onError(t)}),e.onError(t)},function(t){e.onCompleted()});try{for(var i=0,s=t.length;s>i;i++)n.push(t[i].activate(r,o,function(t){var r=n.indexOf(t);n.splice(r,1),
0===n.length&&e.onCompleted()}))}catch(u){wr(u).subscribe(e)}var c=new Ke;return r.forEach(function(t){t.subscribe(),c.add(t)}),c})};var gi=function(t){function e(e,n){this._dt=e,this._s=n,t.call(this)}function n(t,e){e.onNext(0),e.onCompleted()}return ze(e,t),e.prototype.subscribeCore=function(t){return this._s.scheduleFuture(t,this._dt,n)},e}(In),Ei=Ln.interval=function(t,e){return Et(t,t,hn(e)?e:gn)};Ln.timer=function(t,e,n){var r;return hn(n)||(n=gn),null!=e&&"number"==typeof e?r=e:hn(e)&&(n=e),(t instanceof Date||"number"==typeof t)&&r===s?wt(t,n):t instanceof Date&&r!==s?gt(t.getTime(),e,n):Et(t,r,n)};qn.delay=function(){var t=arguments[0];if("number"==typeof t||t instanceof Date){var e=t,n=arguments[1];return hn(n)||(n=gn),e instanceof Date?xt(this,e,n):Ct(this,e,n)}if(Ln.isObservable(t)||Gt(t))return Nt(this,t,arguments[1]);throw new Error("Invalid arguments")};var Ci=function(t){function e(e,n,r){hn(r)||(r=gn),this.source=e,this._dt=n,this._s=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new en;return new nn(this.source.subscribe(new xi(t,this.source,this._dt,this._s,e)),e)},e}(In),xi=function(t){function e(e,n,r,o,i){this._o=e,this._s=n,this._d=r,this._scheduler=o,this._c=i,this._v=null,this._hv=!1,this._id=0,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._hv=!0,this._v=t;var e=++this._id,n=new tn;this._c.setDisposable(n),n.setDisposable(this._scheduler.scheduleFuture(this,this._d,function(n,r){r._hv&&r._id===e&&r._o.onNext(t),r._hv=!1}))},e.prototype.error=function(t){this._c.dispose(),this._o.onError(t),this._hv=!1,this._id++},e.prototype.completed=function(){this._c.dispose(),this._hv&&this._o.onNext(this._v),this._o.onCompleted(),this._hv=!1,this._id++},e}(Tn);qn.debounce=function(){if(Gt(arguments[0]))return Ot(this,arguments[0]);if("number"==typeof arguments[0])return new Ci(this,arguments[0],arguments[1]);throw new Error("Invalid arguments")},qn.windowWithTime=function(t,e,n){var r,o=this;return null==e&&(r=t),hn(n)||(n=gn),"number"==typeof e?r=e:hn(e)&&(r=t,n=e),new Xi(function(e){function i(){var t=new tn,o=!1,s=!1;p.setDisposable(t),h===c?(o=!0,s=!0):c>h?o=!0:s=!0;var l=o?h:c,d=l-f;f=l,o&&(h+=r),s&&(c+=r),t.setDisposable(n.scheduleFuture(null,d,function(){if(s){var t=new es;a.push(t),e.onNext(Ve(t,u))}o&&a.shift().onCompleted(),i()}))}var s,u,c=r,h=t,a=[],p=new en,f=0;return s=new Ke(p),u=new on(s),a.push(new es),e.onNext(Ve(a[0],u)),i(),s.add(o.subscribe(function(t){for(var e=0,n=a.length;n>e;e++)a[e].onNext(t)},function(t){for(var n=0,r=a.length;r>n;n++)a[n].onError(t);e.onError(t)},function(){for(var t=0,n=a.length;n>t;t++)a[t].onCompleted();e.onCompleted()})),u},o)},qn.windowWithTimeOrCount=function(t,e,n){var r=this;return hn(n)||(n=gn),new Xi(function(o){function i(e){var r=new tn;s.setDisposable(r),r.setDisposable(n.scheduleFuture(null,t,function(){if(e===a){h=0;var t=++a;p.onCompleted(),p=new es,o.onNext(Ve(p,c)),i(t)}}))}var s=new en,u=new Ke(s),c=new on(u),h=0,a=0,p=new es;return o.onNext(Ve(p,c)),i(0),u.add(r.subscribe(function(t){var n=0,r=!1;p.onNext(t),++h===e&&(r=!0,h=0,n=++a,p.onCompleted(),p=new es,o.onNext(Ve(p,c))),r&&i(n)},function(t){p.onError(t),o.onError(t)},function(){p.onCompleted(),o.onCompleted()})),c},r)},qn.bufferWithTime=function(t,e,n){return this.windowWithTime(t,e,n).flatMap(V)},qn.bufferWithTimeOrCount=function(t,e,n){return this.windowWithTimeOrCount(t,e,n).flatMap(V)};var Ni=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Oi(t,this._s))},e}(In),Oi=function(t){function e(e,n){this._o=e,this._s=n,this._l=n.now(),t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=this._s.now(),n=e-this._l;this._l=e,this._o.onNext({value:t,interval:n})},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.timeInterval=function(t){return hn(t)||(t=gn),new Ni(this,t)};var Di=function(t){function e(e,n){this.source=e,this._s=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Si(t,this._s))},e}(In),Si=function(t){function e(e,n){this._o=e,this._s=n,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._o.onNext({value:t,timestamp:this._s.now()})},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.timestamp=function(t){return hn(t)||(t=gn),new Di(this,t)},qn.sample=qn.throttleLatest=function(t,e){return hn(e)||(e=gn),"number"==typeof t?Dt(this,Ei(t,e)):Dt(this,t)};var Ai=Bt.TimeoutError=function(t){this.message=t||"Timeout has occurred",this.name="TimeoutError",Error.call(this)};Ai.prototype=Object.create(Error.prototype),qn.timeout=function(){var t=arguments[0];if(t instanceof Date||"number"==typeof t)return At(this,t,arguments[1],arguments[2]);if(Ln.isObservable(t)||Gt(t))return St(this,t,arguments[1],arguments[2]);throw new Error("Invalid arguments")};var ji=function(t){function e(e,n,r,o,i,s){this._state=e,this._cndFn=n,this._itrFn=r,this._resFn=o,this._timeFn=i,this._s=s,this._first=!0,this._hasResult=!1,t.call(this)}function n(t,e){if(t._hasResult&&t._o.onNext(t._state),t._first)t._first=!1;else if(t._state=Yt(t._itrFn)(t._state),t._state===Xt)return t._o.onError(t._state.e);if(t._hasResult=Yt(t._cndFn)(t._state),t._hasResult===Xt)return t._o.onError(t._hasResult.e);if(t._hasResult){var n=Yt(t._resFn)(t._state);if(n===Xt)return t._o.onError(n.e);var r=Yt(t._timeFn)(t._state);if(r===Xt)return t._o.onError(r.e);e(t,r)}else t._o.onCompleted()}return ze(e,t),e.prototype.subscribeCore=function(t){return this._o=t,this._s.scheduleRecursiveFuture(this,new Date(this._s.now()),n)},e}(In);Ln.generateWithAbsoluteTime=function(t,e,n,r,o,i){return hn(i)||(i=gn),new ji(t,e,n,r,o,i)};var ki=function(t){function e(e,n,r,o,i,s){this._state=e,this._cndFn=n,this._itrFn=r,this._resFn=o,this._timeFn=i,this._s=s,this._first=!0,this._hasResult=!1,t.call(this)}function n(t,e){if(t._hasResult&&t._o.onNext(t._state),t._first)t._first=!1;else if(t._state=Yt(t._itrFn)(t._state),t._state===Xt)return t._o.onError(t._state.e);if(t._hasResult=Yt(t._cndFn)(t._state),t._hasResult===Xt)return t._o.onError(t._hasResult.e);if(t._hasResult){var n=Yt(t._resFn)(t._state);if(n===Xt)return t._o.onError(n.e);var r=Yt(t._timeFn)(t._state);if(r===Xt)return t._o.onError(r.e);e(t,r)}else t._o.onCompleted()}return ze(e,t),e.prototype.subscribeCore=function(t){return this._o=t,this._s.scheduleRecursiveFuture(this,0,n)},e}(In);Ln.generateWithRelativeTime=function(t,e,n,r,o,i){return hn(i)||(i=gn),new ki(t,e,n,r,o,i)};var qi=function(t){function e(e,n,r){this.source=e,this._dt=n,this._s=r,t.call(this)}function n(t,e){var n=e[0],r=e[1],o=e[2];o.setDisposable(n.subscribe(r))}return ze(e,t),e.prototype.subscribeCore=function(t){var e=new en;return e.setDisposable(this._s.scheduleFuture([this.source,t,e],this._dt,n)),e},e}(In);qn.delaySubscription=function(t,e){return hn(e)||(e=gn),new qi(this,t,e)};var Ti=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Pi(t,this))},e}(In),Pi=function(t){function e(e,n){this._o=e,this._s=n._s,this._d=n._d,this._q=[],t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=this._s.now();for(this._q.push({interval:e,value:t});this._q.length>0&&e-this._q[0].interval>=this._d;)this._o.onNext(this._q.shift().value)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){for(var t=this._s.now();this._q.length>0&&t-this._q[0].interval>=this._d;)this._o.onNext(this._q.shift().value);this._o.onCompleted()},e}(Tn);qn.skipLastWithTime=function(t,e){return hn(e)||(e=gn),new Ti(this,t,e)};var Fi=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return this.source.subscribe(new Ri(t,this._d,this._s))},e}(In),Ri=function(t){function e(e,n,r){this._o=e,this._d=n,this._s=r,this._q=[],t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=this._s.now();for(this._q.push({interval:e,value:t});this._q.length>0&&e-this._q[0].interval>=this._d;)this._q.shift()},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){for(var t=this._s.now();this._q.length>0;){var e=this._q.shift();t-e.interval<=this._d&&this._o.onNext(e.value)}this._o.onCompleted()},e}(Tn);qn.takeLastWithTime=function(t,e){return hn(e)||(e=gn),new Fi(this,t,e)},qn.takeLastBufferWithTime=function(t,e){var n=this;return hn(e)||(e=gn),new Xi(function(r){var o=[];return n.subscribe(function(n){var r=e.now();for(o.push({interval:r,value:n});o.length>0&&r-o[0].interval>=t;)o.shift()},function(t){r.onError(t)},function(){for(var n=e.now(),i=[];o.length>0;){var s=o.shift();n-s.interval<=t&&i.push(s.value)}r.onNext(i),r.onCompleted()})},n)};var Mi=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,t.call(this)}function n(t,e){e.onCompleted()}return ze(e,t),e.prototype.subscribeCore=function(t){return new nn(this._s.scheduleFuture(t,this._d,n),this.source.subscribe(t))},e}(In);qn.takeWithTime=function(t,e){return hn(e)||(e=gn),new Mi(this,t,e)};var Li=function(t){function e(e,n,r){this.source=e,this._d=n,this._s=r,this._open=!1,t.call(this)}function n(t,e){e._open=!0}return ze(e,t),e.prototype.subscribeCore=function(t){return new nn(this._s.scheduleFuture(this,this._d,n),this.source.subscribe(new Ii(t,this)))},e}(In),Ii=function(t){function e(e,n){this._o=e,this._p=n,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._p._open&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.skipWithTime=function(t,e){return hn(e)||(e=gn),new Li(this,t,e)};var Wi=function(t){function e(e,n,r){this.source=e,this._st=n,this._s=r,t.call(this)}function n(t,e){e._open=!0}return ze(e,t),e.prototype.subscribeCore=function(t){return this._open=!1,new nn(this._s.scheduleFuture(this,this._st,n),this.source.subscribe(new zi(t,this)))},e}(In),zi=function(t){function e(e,n){this._o=e,this._p=n,t.call(this)}return ze(e,t),e.prototype.next=function(t){this._p._open&&this._o.onNext(t)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._o.onCompleted()},e}(Tn);qn.skipUntilWithTime=function(t,e){return hn(e)||(e=gn),new Wi(this,t,e)},qn.takeUntilWithTime=function(t,e){hn(e)||(e=gn);var n=this;return new Xi(function(r){return new nn(e.scheduleFuture(r,t,function(t,e){e.onCompleted()}),n.subscribe(r))},n)},qn.throttle=function(t,e){hn(e)||(e=gn);var n=+t||0;if(0>=n)throw new RangeError("windowDuration cannot be less or equal zero.");var r=this;return new Xi(function(t){var o=0;return r.subscribe(function(r){var i=e.now();(0===o||i-o>=n)&&(o=i,t.onNext(r))},function(e){t.onError(e)},function(){t.onCompleted()})},r)};var Bi=function(t){function e(e,n){this._o=e,this._xform=n,t.call(this)}return ze(e,t),e.prototype.next=function(t){var e=Yt(this._xform["@@transducer/step"]).call(this._xform,this._o,t);e===Xt&&this._o.onError(e.e)},e.prototype.error=function(t){this._o.onError(t)},e.prototype.completed=function(){this._xform["@@transducer/result"](this._o)},e}(Tn);qn.transduce=function(t){var e=this;return new Xi(function(n){var r=t(jt(n));return e.subscribe(new Bi(n,r))},e)},qn.switchFirst=function(){var t=this;return new Xi(function(e){var n=!1,r=!1,o=new tn,i=new Ke;return i.add(o),o.setDisposable(t.subscribe(function(t){if(!n){n=!0,$t(t)&&(t=Xn(t));var o=new tn;i.add(o),o.setDisposable(t.subscribe(function(t){e.onNext(t)},function(t){e.onError(t)},function(){i.remove(o),n=!1,r&&1===i.length&&e.onCompleted()}))}},function(t){e.onError(t)},function(){r=!0,!n&&1===i.length&&e.onCompleted()})),i},this)},qn.flatMapFirst=qn.selectManyFirst=function(t,e,n){return new Wn(this,t,e,n).switchFirst()},Bt.Observable.prototype.flatMapWithMaxConcurrent=function(t,e,n,r){return new Wn(this,e,n,r).merge(t)};var Vi=Bt.VirtualTimeScheduler=function(t){function e(e,n){this.clock=e,this.comparer=n,this.isEnabled=!1,this.queue=new Ue(1024),t.call(this)}ze(e,t);var n=e.prototype;return n.now=function(){return this.toAbsoluteTime(this.clock)},n.schedule=function(t,e){return this.scheduleAbsolute(t,this.clock,e)},n.scheduleFuture=function(t,e,n){var r=e instanceof Date?this.toRelativeTime(e-this.now()):this.toRelativeTime(e);return this.scheduleRelative(t,r,n)},n.add=he,n.toAbsoluteTime=he,n.toRelativeTime=he,n.schedulePeriodic=function(t,e,n){var r=new fn(this,t,e,n);return r.start()},n.scheduleRelative=function(t,e,n){var r=this.add(this.clock,e);return this.scheduleAbsolute(t,r,n)},n.start=function(){if(!this.isEnabled){this.isEnabled=!0;do{var t=this.getNext();null!==t?(this.comparer(t.dueTime,this.clock)>0&&(this.clock=t.dueTime),t.invoke()):this.isEnabled=!1}while(this.isEnabled)}},n.stop=function(){this.isEnabled=!1},n.advanceTo=function(t){var e=this.comparer(this.clock,t);if(this.comparer(this.clock,t)>0)throw new se;if(0!==e&&!this.isEnabled){this.isEnabled=!0;do{var n=this.getNext();null!==n&&this.comparer(n.dueTime,t)<=0?(this.comparer(n.dueTime,this.clock)>0&&(this.clock=n.dueTime),n.invoke()):this.isEnabled=!1}while(this.isEnabled);this.clock=t}},n.advanceBy=function(t){var e=this.add(this.clock,t),n=this.comparer(this.clock,e);if(n>0)throw new se;0!==n&&this.advanceTo(e)},n.sleep=function(t){var e=this.add(this.clock,t);if(this.comparer(this.clock,e)>=0)throw new se;this.clock=e},n.getNext=function(){for(;this.queue.length>0;){var t=this.queue.peek();if(!t.isCancelled())return t;this.queue.dequeue()}return null},n.scheduleAbsolute=function(t,e,n){function r(t,e){return o.queue.remove(i),n(t,e)}var o=this,i=new sn(this,t,r,e,this.comparer);return this.queue.enqueue(i),i.disposable},e}(un);Bt.HistoricalScheduler=function(t){function e(e,n){var r=null==e?0:e,o=n||Jt;t.call(this,r,o)}ze(e,t);var n=e.prototype;return n.add=function(t,e){return t+e},n.toAbsoluteTime=function(t){return new Date(t).getTime()},n.toRelativeTime=function(t){return t},e}(Bt.VirtualTimeScheduler),kt.prototype.equals=function(t){return t===this?!0:null==t?!1:"N"!==t.kind?!1:this.predicate(t.value)},qt.prototype.equals=function(t){return t===this?!0:null==t?!1:"E"!==t.kind?!1:this.predicate(t.error)};var Ui=Bt.ReactiveTest={created:100,subscribed:200,disposed:1e3,onNext:function(t,e){return"function"==typeof e?new Hi(t,new kt(e)):new Hi(t,Cn.createOnNext(e))},onError:function(t,e){return"function"==typeof e?new Hi(t,new qt(e)):new Hi(t,Cn.createOnError(e))},onCompleted:function(t){return new Hi(t,Cn.createOnCompleted())},subscribe:function(t,e){return new Ki(t,e)}},Hi=Bt.Recorded=function(t,e,n){this.time=t,this.value=e,this.comparer=n||Kt};Hi.prototype.equals=function(t){return this.time===t.time&&this.comparer(this.value,t.value)},Hi.prototype.toString=function(){return this.value.toString()+"@"+this.time};var Ki=Bt.Subscription=function(t,e){this.subscribe=t,this.unsubscribe=e||Number.MAX_VALUE};Ki.prototype.equals=function(t){return this.subscribe===t.subscribe&&this.unsubscribe===t.unsubscribe},Ki.prototype.toString=function(){return"("+this.subscribe+", "+(this.unsubscribe===Number.MAX_VALUE?"Infinite":this.unsubscribe)+")"};var Ji=Bt.MockDisposable=function(t){this.scheduler=t,this.disposes=[],this.disposes.push(this.scheduler.clock)};Ji.prototype.dispose=function(){this.disposes.push(this.scheduler.clock)};var Qi=function(t){function e(e){t.call(this),this.scheduler=e,this.messages=[]}ze(e,t);var n=e.prototype;return n.onNext=function(t){this.messages.push(new Hi(this.scheduler.clock,Cn.createOnNext(t)))},n.onError=function(t){this.messages.push(new Hi(this.scheduler.clock,Cn.createOnError(t)))},n.onCompleted=function(){this.messages.push(new Hi(this.scheduler.clock,Cn.createOnCompleted()))},e}(jn);Tt.prototype.then=function(t,e){var n=this;this.subscriptions.push(new Ki(this.scheduler.clock));var r,o=this.subscriptions.length-1,i=Bt.Observer.create(function(e){var u=t(e);if(u&&"function"==typeof u.then)r=u;else{var c=n.scheduler.clock;r=new Tt(n.scheduler,[Bt.ReactiveTest.onNext(c,s),Bt.ReactiveTest.onCompleted(c)])}var h=n.observers.indexOf(i);n.observers.splice(h,1),n.subscriptions[o]=new Ki(n.subscriptions[o].subscribe,n.scheduler.clock)},function(t){e(t);var r=n.observers.indexOf(i);n.observers.splice(r,1),n.subscriptions[o]=new Ki(n.subscriptions[o].subscribe,n.scheduler.clock)});return this.observers.push(i),r||new Tt(this.scheduler,this.messages)};var $i=function(t){function e(e,n){t.call(this);var r,o,i=this;this.scheduler=e,this.messages=n,this.subscriptions=[],this.observers=[];for(var s=0,u=this.messages.length;u>s;s++)r=this.messages[s],o=r.value,function(t){e.scheduleAbsolute(null,r.time,function(){for(var e=i.observers.slice(0),n=0,r=e.length;r>n;n++)t.accept(e[n]);return Ge})}(o)}return ze(e,t),e.prototype._subscribe=function(t){var e=this;this.observers.push(t),this.subscriptions.push(new Ki(this.scheduler.clock));var n=this.subscriptions.length-1;return $e(function(){var r=e.observers.indexOf(t);e.observers.splice(r,1),e.subscriptions[n]=new Ki(e.subscriptions[n].subscribe,e.scheduler.clock)})},e}(Ln),Gi=function(t){function e(e,n){t.call(this),this.scheduler=e,this.messages=n,this.subscriptions=[]}return ze(e,t),e.prototype._subscribe=function(t){var e,n,r=this;this.subscriptions.push(new Ki(this.scheduler.clock));for(var o=this.subscriptions.length-1,i=new Ke,s=0,u=this.messages.length;u>s;s++)e=this.messages[s],n=e.value,function(n){i.add(r.scheduler.scheduleRelative(null,e.time,function(){return n.accept(t),Ge}))}(n);return $e(function(){r.subscriptions[o]=new Ki(r.subscriptions[o].subscribe,r.scheduler.clock),i.dispose()})},e}(Ln);Bt.TestScheduler=function(t){function e(t,e){return t>e?1:e>t?-1:0}function n(){t.call(this,0,e)}return ze(n,t),n.prototype.scheduleAbsolute=function(e,n,r){return n<=this.clock&&(n=this.clock+1),t.prototype.scheduleAbsolute.call(this,e,n,r)},n.prototype.add=function(t,e){return t+e},n.prototype.toAbsoluteTime=function(t){return new Date(t).getTime()},n.prototype.toRelativeTime=function(t){return t},n.prototype.startScheduler=function(t,e){e||(e={}),null==e.created&&(e.created=Ui.created),null==e.subscribed&&(e.subscribed=Ui.subscribed),null==e.disposed&&(e.disposed=Ui.disposed);var n,r,o=this.createObserver();return this.scheduleAbsolute(null,e.created,function(){return n=t(),Ge}),this.scheduleAbsolute(null,e.subscribed,function(){return r=n.subscribe(o),Ge}),this.scheduleAbsolute(null,e.disposed,function(){return r.dispose(),Ge}),this.start(),o},n.prototype.createHotObservable=function(){var t,e=arguments.length;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}return new $i(this,t)},n.prototype.createColdObservable=function(){var t,e=arguments.length;if(Array.isArray(arguments[0]))t=arguments[0];else{t=new Array(e);for(var n=0;e>n;n++)t[n]=arguments[n]}return new Gi(this,t)},n.prototype.createResolvedPromise=function(t,e){return new Tt(this,[Bt.ReactiveTest.onNext(t,e),Bt.ReactiveTest.onCompleted(t)])},n.prototype.createRejectedPromise=function(t,e){return new Tt(this,[Bt.ReactiveTest.onError(t,e)])},n.prototype.createObserver=function(){return new Qi(this)},n}(Vi);var Xi=Bt.AnonymousObservable=function(t){function e(t){return t&&Gt(t.dispose)?t:Gt(t)?$e(t):Ge}function n(t,n){var r=n[0],o=n[1],i=Yt(o.__subscribe).call(o,r);i!==Xt||r.fail(Xt.e)||h(Xt.e),r.setDisposable(e(i))}function r(e,n){this.source=n,this.__subscribe=e,t.call(this)}return ze(r,t),r.prototype._subscribe=function(t){var e=new Yi(t),r=[e,this];return bn.scheduleRequired()?bn.schedule(r,n):n(null,r),e},r}(Ln),Yi=function(t){function e(e){t.call(this),this.observer=e,this.m=new tn}ze(e,t);var n=e.prototype;return n.next=function(t){var e=Yt(this.observer.onNext).call(this.observer,t);e===Xt&&(this.dispose(),h(e.e))},n.error=function(t){var e=Yt(this.observer.onError).call(this.observer,t);this.dispose(),e===Xt&&h(e.e)},n.completed=function(){var t=Yt(this.observer.onCompleted).call(this.observer);this.dispose(),t===Xt&&h(t.e)},n.setDisposable=function(t){this.m.setDisposable(t)},n.getDisposable=function(){return this.m.getDisposable()},n.dispose=function(){t.prototype.dispose.call(this),this.m.dispose()},e}(Tn),Zi=function(t){function e(e,n){this._m=e,this._u=n,t.call(this)}return ze(e,t),e.prototype.subscribeCore=function(t){return new nn(this._m.getDisposable(),this._u.subscribe(t))},e}(In),ts=function(t){function e(e,n,r){t.call(this),this.key=e,this.underlyingObservable=r?new Zi(r,n):n}return ze(e,t),e.prototype._subscribe=function(t){return this.underlyingObservable.subscribe(t)},e}(Ln),es=Bt.Subject=function(t){function e(){t.call(this),this.isDisposed=!1,this.isStopped=!1,this.observers=[],this.hasError=!1}return ze(e,t),Be(e.prototype,jn.prototype,{_subscribe:function(t){return Ye(this),this.isStopped?this.hasError?(t.onError(this.error),Ge):(t.onCompleted(),Ge):(this.observers.push(t),new pi(this,t))},hasObservers:function(){return this.observers.length>0},onCompleted:function(){if(Ye(this),!this.isStopped){this.isStopped=!0;for(var t=0,e=u(this.observers),n=e.length;n>t;t++)e[t].onCompleted();this.observers.length=0}},onError:function(t){if(Ye(this),!this.isStopped){this.isStopped=!0,this.error=t,this.hasError=!0;for(var e=0,n=u(this.observers),r=n.length;r>e;e++)n[e].onError(t);this.observers.length=0}},onNext:function(t){if(Ye(this),!this.isStopped)for(var e=0,n=u(this.observers),r=n.length;r>e;e++)n[e].onNext(t)},dispose:function(){this.isDisposed=!0,this.observers=null}}),e.create=function(t,e){return new rs(t,e)},e}(Ln),ns=Bt.AsyncSubject=function(t){function e(){t.call(this),this.isDisposed=!1,this.isStopped=!1,this.hasValue=!1,this.observers=[],this.hasError=!1}return ze(e,t),Be(e.prototype,jn,{_subscribe:function(t){return Ye(this),this.isStopped?(this.hasError?t.onError(this.error):this.hasValue?(t.onNext(this.value),t.onCompleted()):t.onCompleted(),Ge):(this.observers.push(t),new pi(this,t))},hasObservers:function(){return Ye(this),this.observers.length>0},onCompleted:function(){var t,e;if(Ye(this),!this.isStopped){this.isStopped=!0;var n=u(this.observers),e=n.length;if(this.hasValue)for(t=0;e>t;t++){var r=n[t];r.onNext(this.value),r.onCompleted()}else for(t=0;e>t;t++)n[t].onCompleted();this.observers.length=0}},onError:function(t){if(Ye(this),!this.isStopped){this.isStopped=!0,this.hasError=!0,this.error=t;for(var e=0,n=u(this.observers),r=n.length;r>e;e++)n[e].onError(t);this.observers.length=0}},onNext:function(t){Ye(this),this.isStopped||(this.value=t,this.hasValue=!0)},dispose:function(){this.isDisposed=!0,this.observers=null,this.error=null,this.value=null}}),e}(Ln),rs=Bt.AnonymousSubject=function(t){function e(e,n){this.observer=e,this.observable=n,t.call(this)}return ze(e,t),Be(e.prototype,jn.prototype,{_subscribe:function(t){return this.observable.subscribe(t)},onCompleted:function(){this.observer.onCompleted()},onError:function(t){this.observer.onError(t)},onNext:function(t){this.observer.onNext(t)}}),e}(Ln);Bt.Pauser=function(t){function e(){t.call(this)}return ze(e,t),e.prototype.pause=function(){this.onNext(!1)},e.prototype.resume=function(){this.onNext(!0)},e}(es),zt.Rx=Bt,r=function(){return Bt}.call(e,n,e,t),!(r!==s&&(t.exports=r));var os=d()}).call(this)}).call(e,n(11)(t),function(){return this}(),n(12))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){function n(){h=!1,s.length?c=s.concat(c):a=-1,c.length&&r()}function r(){if(!h){var t=setTimeout(n);h=!0;for(var e=c.length;e;){for(s=c,c=[];++a<e;)s&&s[a].run();a=-1,e=c.length}s=null,h=!1,clearTimeout(t)}}function o(t,e){this.fun=t,this.array=e}function i(){}var s,u=t.exports={},c=[],h=!1,a=-1;u.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new o(t,e)),1!==c.length||h||setTimeout(r,0)},o.prototype.run=function(){this.fun.apply(null,this.array)},u.title="browser",u.browser=!0,u.env={},u.argv=[],u.version="",u.versions={},u.on=i,u.addListener=i,u.once=i,u.off=i,u.removeListener=i,u.removeAllListeners=i,u.emit=i,u.binding=function(t){throw new Error("process.binding is not supported")},u.cwd=function(){return"/"},u.chdir=function(t){throw new Error("process.chdir is not supported")},u.umask=function(){return 0}}]);
//# sourceMappingURL=data:application/json;base64,