!function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var r={};return t.m=e,t.c=r,t.p="/",t(0)}([function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(1),i=n(o),u=r(7),a=n(u);if(window){window.Climb=window.Climb||{};for(var l=document.querySelectorAll(".climb-wall"),c=0;c<l.length;++c){var s=l[c],f=s.dataset.collectionId,p=s.dataset.limit;i["default"].render(i["default"].createElement(a["default"],{collectionId:f,limit:p}),s)}}t["default"]=a["default"],e.exports=t["default"]},function(e,t){e.exports=React},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},l=r(1),c=n(l),s=function(e){function t(){o(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("a",{className:"climb__tile__author",href:this.props.link},c["default"].createElement("img",{src:this.props.picture,alt:"Profile pic of "+this.props.name}),c["default"].createElement("h4",{className:"climb__tile__author__username"},this.props.username),c["default"].createElement("h4",{className:"climb__tile__author__followers"},this.props.followers_count))}}]),t}(c["default"].Component);s.propTypes={},t["default"]=s,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},l=r(1),c=n(l),s=function(e){function t(){o(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("img",{className:"climb__tile__image",src:this.props.src,"data-width":this.props.width,"data-height":this.props.height})}}]),t}(c["default"].Component);s.propTypes={src:c["default"].PropTypes.string.isRequired,width:c["default"].PropTypes.number,height:c["default"].PropTypes.number},t["default"]=s,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},l=r(1),c=n(l),s=function(e){function t(){o(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("ul",null)}}]),t}(c["default"].Component);s.propTypes={body:c["default"].PropTypes.string.isRequired},t["default"]=s,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},l=r(1),c=n(l),s=function(e){function t(){o(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("div",{className:"climb__tile__message",dangerouslySetInnerHTML:{__html:this.props.body}})}}]),t}(c["default"].Component);s.propTypes={body:c["default"].PropTypes.string.isRequired},t["default"]=s,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},l=r(1),c=n(l),s=r(3),f=n(s),p=r(5),d=n(p),y=r(2),v=n(y),m=r(4),b=n(m),h=function(e){function t(e){o(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.createImage.bind(this),this.createMessage.bind(this),this.createInteraction.bind(this),this.createClassString.bind(this)}return i(t,e),u(t,[{key:"createImage",value:function(){if(null!==this.props.image){var e=this.props.image,t=e.url,r=e.width,n=e.height;return c["default"].createElement(f["default"],{src:t,width:r,height:n})}return null}},{key:"createMessage",value:function(){return this.props.message?c["default"].createElement(d["default"],{body:this.props.message}):null}},{key:"createInteraction",value:function(){return this.props.link?c["default"].createElement(b["default"],{body:this.props}):null}},{key:"createClassString",value:function(){var e="climb__tile climb__tile--"+this.props.source_type;return this.props.image&&(e+=" climb__tile--has-media climb__tile--has-image"),this.props.video_url&&(e+=" climb__tile--has-media climb__tile--has-video"),e}},{key:"render",value:function(){var e=this.createImage(),t=this.createMessage(),r=this.createInteraction(),n=this.createClassString(),o=this.props.author;return c["default"].createElement("div",{className:n},c["default"].createElement("a",{href:this.props.link},e),c["default"].createElement("div",{className:"climb__tile__content"},t),c["default"].createElement(v["default"],o),c["default"].createElement("div",{className:"climb__tile__interaction"},r))}}]),t}(c["default"].Component);h.propTypes={link:c["default"].PropTypes.string.isRequired,source_type:c["default"].PropTypes.string.isRequired,timestamp:c["default"].PropTypes.number.isRequired,author:c["default"].PropTypes.shape({username:c["default"].PropTypes.string.isRequired,picture:c["default"].PropTypes.string.isRequired,link:c["default"].PropTypes.string.isRequired}),message:c["default"].PropTypes.string,video_src:c["default"].PropTypes.string,image:c["default"].PropTypes.shape({url:c["default"].PropTypes.string.isRequired,width:c["default"].PropTypes.number.isRequired,height:c["default"].PropTypes.number.isRequired})},t["default"]=h,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},l=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),c=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},s=r(1),f=n(s),p=r(8),d=n(p),y=r(6),v=n(y),m=function(e){function t(e){i(this,t),c(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.state={items:[]}}return u(t,e),l(t,[{key:"init",value:function(){var e=this;this.props.collectionId&&d["default"].getFeed(this.props.collectionId).then(function(t){e.setState({items:t})})}},{key:"componentDidMount",value:function(){this.init()}},{key:"componentDidUpdate",value:function(){var e=void 0;(e=window.Climb&&window.Climb.onUpdate?window.Climb.onUpdate:function(){})()}},{key:"render",value:function(){var e=[];return this.state.items.forEach(function(t){var r=t.id,n=o(t,["id"]);e.push(f["default"].createElement(v["default"],a({ref:r,key:r},n)))}),f["default"].createElement("div",{className:"climb__wall"},e)}}]),t}(f["default"].Component);m.displayName="Wall",m.propTypes={collectionId:f["default"].PropTypes.string.isRequired,limit:f["default"].PropTypes.number},t["default"]=m,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(9),i=n(o),u=function(e){return i["default"]("http://app.climb.social/api/v1/collections/"+e).then(function(e){return e.json()})},a={getFeed:u};t["default"]=a,e.exports=t["default"]},function(e,t,r){var n,o,i;!function(r,u){o=[t,e],n=u,i="function"==typeof n?n.apply(t,o):n,!(void 0!==i&&(e.exports=i))}(this,function(e,t){"use strict";function r(){return"jsonp_"+Date.now()+"_"+Math.ceil(1e5*Math.random())}function n(e){try{delete window[e]}catch(t){window[e]=void 0}}function o(e){var t=document.getElementById(e);document.getElementsByTagName("head")[0].removeChild(t)}var i={timeout:5e3,jsonpCallback:"callback"},u=function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],u=null!=t.timeout?t.timeout:i.timeout,a=null!=t.jsonpCallback?t.jsonpCallback:i.jsonpCallback,l=void 0;return new Promise(function(t,i){var c=r();window[c]=function(e){t({ok:!0,json:function(){return Promise.resolve(e)}}),l&&clearTimeout(l),o(a+"_"+c),n(c)},e+=-1===e.indexOf("?")?"?":"&";var s=document.createElement("script");s.setAttribute("src",e+a+"="+c),s.id=a+"_"+c,document.getElementsByTagName("head")[0].appendChild(s),l=setTimeout(function(){i(new Error("JSONP request to "+e+" timed out")),n(c),o(a+"_"+c)},u)})};t.exports=u})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcmVhY3QtY2xpbWItc29jaWFsLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBhMjZmMjA0OGNjNjVjZTAzOTc3YyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BdXRob3IuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0ltYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JbnRlcmFjdGlvbi5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTWVzc2FnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGlsZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvV2FsbC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2NsaW1iLmpzIiwid2VicGFjazovLy8uL34vZmV0Y2gtanNvbnAvYnVpbGQvZmV0Y2gtanNvbnAuanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfY29tcG9uZW50c1dhbGxKc3giLCJfY29tcG9uZW50c1dhbGxKc3gyIiwid2luZG93IiwiQ2xpbWIiLCIkdGFyZ2V0cyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImkiLCJsZW5ndGgiLCIkaXRlbSIsImNvbGxlY3Rpb25JZCIsImRhdGFzZXQiLCJsaW1pdCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJSZWFjdCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9nZXQiLCJfeCIsIl94MiIsIl94MyIsIl9hZ2FpbiIsIm9iamVjdCIsInByb3BlcnR5IiwicmVjZWl2ZXIiLCJkZXNjIiwicGFyZW50IiwiZ2V0dGVyIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJnZXRQcm90b3R5cGVPZiIsIkF1dGhvciIsIl9SZWFjdCRDb21wb25lbnQiLCJ0aGlzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjbGFzc05hbWUiLCJocmVmIiwibGluayIsInNyYyIsInBpY3R1cmUiLCJhbHQiLCJuYW1lIiwidXNlcm5hbWUiLCJmb2xsb3dlcnNfY291bnQiLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJJbWFnZSIsImRhdGEtd2lkdGgiLCJ3aWR0aCIsImRhdGEtaGVpZ2h0IiwiaGVpZ2h0IiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIm51bWJlciIsIkludGVyYWN0aW9uIiwiYm9keSIsIk1lc3NhZ2UiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsIl9JbWFnZSIsIl9JbWFnZTIiLCJfTWVzc2FnZSIsIl9NZXNzYWdlMiIsIl9BdXRob3IiLCJfQXV0aG9yMiIsIl9JbnRlcmFjdGlvbiIsIl9JbnRlcmFjdGlvbjIiLCJUaWxlIiwiY3JlYXRlSW1hZ2UiLCJiaW5kIiwiY3JlYXRlTWVzc2FnZSIsImNyZWF0ZUludGVyYWN0aW9uIiwiY3JlYXRlQ2xhc3NTdHJpbmciLCJpbWFnZSIsIl9wcm9wcyRpbWFnZSIsInVybCIsIm1lc3NhZ2UiLCJjbGFzc1N0cmluZyIsInNvdXJjZV90eXBlIiwidmlkZW9fdXJsIiwiaW50ZXJhY3Rpb24iLCJhdXRob3IiLCJ0aW1lc3RhbXAiLCJzaGFwZSIsInZpZGVvX3NyYyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImtleXMiLCJpbmRleE9mIiwiaGFzT3duUHJvcGVydHkiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInNvdXJjZSIsIl91dGlsc0NsaW1iIiwiX3V0aWxzQ2xpbWIyIiwiX1RpbGUiLCJfVGlsZTIiLCJXYWxsIiwic3RhdGUiLCJpdGVtcyIsIl90aGlzIiwiZ2V0RmVlZCIsInRoZW4iLCJzZXRTdGF0ZSIsImluaXQiLCJjYiIsIm9uVXBkYXRlIiwidGlsZXMiLCJmb3JFYWNoIiwiaXRlbSIsIm90aGVyUHJvcHMiLCJwdXNoIiwicmVmIiwiZGlzcGxheU5hbWUiLCJfZmV0Y2hKc29ucCIsIl9mZXRjaEpzb25wMiIsInJlc3AiLCJqc29uIiwiY2xpbWIiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJnbG9iYWwiLCJmYWN0b3J5IiwiZ2VuZXJhdGVDYWxsYmFja0Z1bmN0aW9uIiwiRGF0ZSIsIm5vdyIsIk1hdGgiLCJjZWlsIiwicmFuZG9tIiwiY2xlYXJGdW5jdGlvbiIsImZ1bmN0aW9uTmFtZSIsImUiLCJyZW1vdmVTY3JpcHQiLCJzY3JpcHRJZCIsInNjcmlwdCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZW1vdmVDaGlsZCIsImRlZmF1bHRPcHRpb25zIiwidGltZW91dCIsImpzb25wQ2FsbGJhY2siLCJmZXRjaEpzb25wIiwib3B0aW9ucyIsInRpbWVvdXRJZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FsbGJhY2tGdW5jdGlvbiIsInJlc3BvbnNlIiwib2siLCJjbGVhclRpbWVvdXQiLCJqc29ucFNjcmlwdCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwic2V0VGltZW91dCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0luQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBRSxXQUNBRSxHQUFBSixFQUNBSyxRQUFBLEVBVUEsT0FOQVAsR0FBQUUsR0FBQU0sS0FBQUgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsUUFBQSxFQUdBRixFQUFBRCxRQXZCQSxHQUFBRCxLQXFDQSxPQVRBRixHQUFBUSxFQUFBVCxFQUdBQyxFQUFBUyxFQUFBUCxFQUdBRixFQUFBVSxFQUFBLElBR0FWLEVBQUEsS0RNTSxTQUFTSSxFQUFRRCxFQUFTSCxHQUUvQixZQU1BLFNBQVNXLEdBQXVCQyxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFFLFVBQVdGLEdBSnpGRyxPQUFPQyxlQUFlYixFQUFTLGNBQzNCYyxPQUFPLEdBS1gsSUFBSUMsR0FBU2xCLEVFdERJLEdGd0RibUIsRUFBVVIsRUFBdUJPLEdBRWpDRSxFQUFxQnBCLEVFekRULEdGMkRacUIsRUFBc0JWLEVBQXVCUyxFRXpEbEQsSUFBSUUsT0FBUSxDQUNSQSxPQUFPQyxNQUFRRCxPQUFPQyxTQUl0QixLQUFLLEdBRkNDLEdBQVdDLFNBQVNDLGlCQUFpQixlQUVsQ0MsRUFBSSxFQUFHQSxFQUFJSCxFQUFTSSxTQUFVRCxFQUFHLENBQ3RDLEdBQU1FLEdBQVFMLEVBQVNHLEdBQ2pCRyxFQUFlRCxFQUFNRSxRQUFRRCxhQUM3QkUsRUFBUUgsRUFBTUUsUUFBUUMsS0FFNUJiLEdBQUEsV0FBTWMsT0FDRmQsRUFBQSxX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YWN0LWNsaW1iLXNvY2lhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfY29tcG9uZW50c1dhbGxKc3ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRcblx0dmFyIF9jb21wb25lbnRzV2FsbEpzeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRzV2FsbEpzeCk7XG5cdFxuXHRpZiAod2luZG93KSB7XG5cdCAgICB3aW5kb3cuQ2xpbWIgPSB3aW5kb3cuQ2xpbWIgfHwge307XG5cdFxuXHQgICAgdmFyICR0YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNsaW1iLXdhbGwnKTtcblx0XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8ICR0YXJnZXRzLmxlbmd0aDsgKytpKSB7XG5cdCAgICAgICAgdmFyICRpdGVtID0gJHRhcmdldHNbaV07XG5cdCAgICAgICAgdmFyIGNvbGxlY3Rpb25JZCA9ICRpdGVtLmRhdGFzZXQuY29sbGVjdGlvbklkO1xuXHQgICAgICAgIHZhciBsaW1pdCA9ICRpdGVtLmRhdGFzZXQubGltaXQ7XG5cdFxuXHQgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5yZW5kZXIoX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudHNXYWxsSnN4MlsnZGVmYXVsdCddLCB7IGNvbGxlY3Rpb25JZDogY29sbGVjdGlvbklkLCBsaW1pdDogbGltaXQgfSksICRpdGVtKTtcblx0ICAgIH1cblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gX2NvbXBvbmVudHNXYWxsSnN4MlsnZGVmYXVsdCddO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cdFxuXHR2YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgZGVzYyA9IHBhcmVudCA9IGdldHRlciA9IHVuZGVmaW5lZDsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBBdXRob3IgPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhBdXRob3IsIF9SZWFjdCRDb21wb25lbnQpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIEF1dGhvcigpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXV0aG9yKTtcblx0XG5cdCAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXV0aG9yLnByb3RvdHlwZSksIFwiY29uc3RydWN0b3JcIiwgdGhpcykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoQXV0aG9yLCBbe1xuXHQgICAgICAgIGtleTogXCJyZW5kZXJcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICBcImFcIixcblx0ICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImNsaW1iX190aWxlX19hdXRob3JcIixcblx0ICAgICAgICAgICAgICAgICAgICBocmVmOiB0aGlzLnByb3BzLmxpbmsgfSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgeyBzcmM6IHRoaXMucHJvcHMucGljdHVyZSxcblx0ICAgICAgICAgICAgICAgICAgICBhbHQ6IFwiUHJvZmlsZSBwaWMgb2YgXCIgKyB0aGlzLnByb3BzLm5hbWUgfSksXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QyW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgIFwiaDRcIixcblx0ICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJjbGltYl9fdGlsZV9fYXV0aG9yX191c2VybmFtZVwiIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy51c2VybmFtZVxuXHQgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgXCJoNFwiLFxuXHQgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImNsaW1iX190aWxlX19hdXRob3JfX2ZvbGxvd2Vyc1wiIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5mb2xsb3dlcnNfY291bnRcblx0ICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIEF1dGhvcjtcblx0fSkoX3JlYWN0MltcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblx0XG5cdEF1dGhvci5wcm9wVHlwZXMgPSB7fTtcblx0XG5cdGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gQXV0aG9yO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IGRlc2MgPSBwYXJlbnQgPSBnZXR0ZXIgPSB1bmRlZmluZWQ7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgSW1hZ2UgPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhJbWFnZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gSW1hZ2UoKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEltYWdlKTtcblx0XG5cdCAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW1hZ2UucHJvdG90eXBlKSwgXCJjb25zdHJ1Y3RvclwiLCB0aGlzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhJbWFnZSwgW3tcblx0ICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgeyBjbGFzc05hbWU6IFwiY2xpbWJfX3RpbGVfX2ltYWdlXCIsXG5cdCAgICAgICAgICAgICAgICBzcmM6IHRoaXMucHJvcHMuc3JjLCBcImRhdGEtd2lkdGhcIjogdGhpcy5wcm9wcy53aWR0aCwgXCJkYXRhLWhlaWdodFwiOiB0aGlzLnByb3BzLmhlaWdodCB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIEltYWdlO1xuXHR9KShfcmVhY3QyW1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXHRcblx0SW1hZ2UucHJvcFR5cGVzID0ge1xuXHQgICAgc3JjOiBfcmVhY3QyW1wiZGVmYXVsdFwiXS5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdCAgICB3aWR0aDogX3JlYWN0MltcImRlZmF1bHRcIl0uUHJvcFR5cGVzLm51bWJlcixcblx0ICAgIGhlaWdodDogX3JlYWN0MltcImRlZmF1bHRcIl0uUHJvcFR5cGVzLm51bWJlclxuXHR9O1xuXHRcblx0ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBJbWFnZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcblxuLyoqKi8gfSxcbi8qIDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblx0XG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBkZXNjID0gcGFyZW50ID0gZ2V0dGVyID0gdW5kZWZpbmVkOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgSW50ZXJhY3Rpb24gPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhJbnRlcmFjdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gSW50ZXJhY3Rpb24oKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEludGVyYWN0aW9uKTtcblx0XG5cdCAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoSW50ZXJhY3Rpb24ucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoSW50ZXJhY3Rpb24sIFt7XG5cdCAgICAgICAga2V5OiAncmVuZGVyJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCd1bCcsIG51bGwpO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gSW50ZXJhY3Rpb247XG5cdH0pKF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXHRcblx0SW50ZXJhY3Rpb24ucHJvcFR5cGVzID0ge1xuXHQgICAgYm9keTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuXHR9O1xuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gSW50ZXJhY3Rpb247XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IGRlc2MgPSBwYXJlbnQgPSBnZXR0ZXIgPSB1bmRlZmluZWQ7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgTWVzc2FnZSA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuXHQgICAgX2luaGVyaXRzKE1lc3NhZ2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIE1lc3NhZ2UoKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lc3NhZ2UpO1xuXHRcblx0ICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihNZXNzYWdlLnByb3RvdHlwZSksIFwiY29uc3RydWN0b3JcIiwgdGhpcykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoTWVzc2FnZSwgW3tcblx0ICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDJbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiY2xpbWJfX3RpbGVfX21lc3NhZ2VcIixcblx0ICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogdGhpcy5wcm9wcy5ib2R5IH0gfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBNZXNzYWdlO1xuXHR9KShfcmVhY3QyW1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXHRcblx0TWVzc2FnZS5wcm9wVHlwZXMgPSB7XG5cdCAgICBib2R5OiBfcmVhY3QyW1wiZGVmYXVsdFwiXS5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcblx0fTtcblx0XG5cdGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gTWVzc2FnZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblx0XG5cdHZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBkZXNjID0gcGFyZW50ID0gZ2V0dGVyID0gdW5kZWZpbmVkOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX0ltYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfSW1hZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW1hZ2UpO1xuXHRcblx0dmFyIF9NZXNzYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciBfTWVzc2FnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZXNzYWdlKTtcblx0XG5cdHZhciBfQXV0aG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfQXV0aG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0F1dGhvcik7XG5cdFxuXHR2YXIgX0ludGVyYWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdHZhciBfSW50ZXJhY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW50ZXJhY3Rpb24pO1xuXHRcblx0dmFyIFRpbGUgPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhUaWxlLCBfUmVhY3QkQ29tcG9uZW50KTtcblx0XG5cdCAgICBmdW5jdGlvbiBUaWxlKHByb3BzKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRpbGUpO1xuXHRcblx0ICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihUaWxlLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcywgcHJvcHMpO1xuXHQgICAgICAgIHRoaXMuY3JlYXRlSW1hZ2UuYmluZCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmNyZWF0ZU1lc3NhZ2UuYmluZCh0aGlzKTtcblx0ICAgICAgICB0aGlzLmNyZWF0ZUludGVyYWN0aW9uLmJpbmQodGhpcyk7XG5cdCAgICAgICAgdGhpcy5jcmVhdGVDbGFzc1N0cmluZy5iaW5kKHRoaXMpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhUaWxlLCBbe1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZUltYWdlJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlSW1hZ2UoKSB7XG5cdFxuXHQgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pbWFnZSAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIF9wcm9wcyRpbWFnZSA9IHRoaXMucHJvcHMuaW1hZ2U7XG5cdCAgICAgICAgICAgICAgICB2YXIgc3JjID0gX3Byb3BzJGltYWdlLnVybDtcblx0ICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IF9wcm9wcyRpbWFnZS53aWR0aDtcblx0ICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBfcHJvcHMkaW1hZ2UuaGVpZ2h0O1xuXHRcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfSW1hZ2UyWydkZWZhdWx0J10sIHsgc3JjOiBzcmMsXG5cdCAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuXHQgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0IH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjcmVhdGVNZXNzYWdlJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTWVzc2FnZSgpIHtcblx0XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm1lc3NhZ2UpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfTWVzc2FnZTJbJ2RlZmF1bHQnXSwgeyBib2R5OiB0aGlzLnByb3BzLm1lc3NhZ2UgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZUludGVyYWN0aW9uJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlSW50ZXJhY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmxpbmspIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfSW50ZXJhY3Rpb24yWydkZWZhdWx0J10sIHsgYm9keTogdGhpcy5wcm9wcyB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY3JlYXRlQ2xhc3NTdHJpbmcnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVDbGFzc1N0cmluZygpIHtcblx0XG5cdCAgICAgICAgICAgIHZhciBjbGFzc1N0cmluZyA9ICdjbGltYl9fdGlsZSBjbGltYl9fdGlsZS0tJyArIHRoaXMucHJvcHMuc291cmNlX3R5cGU7XG5cdFxuXHQgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pbWFnZSkge1xuXHQgICAgICAgICAgICAgICAgY2xhc3NTdHJpbmcgKz0gJyBjbGltYl9fdGlsZS0taGFzLW1lZGlhIGNsaW1iX190aWxlLS1oYXMtaW1hZ2UnO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy52aWRlb191cmwpIHtcblx0ICAgICAgICAgICAgICAgIGNsYXNzU3RyaW5nICs9ICcgY2xpbWJfX3RpbGUtLWhhcy1tZWRpYSBjbGltYl9fdGlsZS0taGFzLXZpZGVvJztcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIGNsYXNzU3RyaW5nO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFxuXHQgICAgICAgICAgICB2YXIgaW1hZ2UgPSB0aGlzLmNyZWF0ZUltYWdlKCk7XG5cdCAgICAgICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5jcmVhdGVNZXNzYWdlKCk7XG5cdCAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IHRoaXMuY3JlYXRlSW50ZXJhY3Rpb24oKTtcblx0ICAgICAgICAgICAgdmFyIGNsYXNzU3RyaW5nID0gdGhpcy5jcmVhdGVDbGFzc1N0cmluZygpO1xuXHQgICAgICAgICAgICB2YXIgYXV0aG9yID0gdGhpcy5wcm9wcy5hdXRob3I7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBjbGFzc1N0cmluZyB9LFxuXHQgICAgICAgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgJ2EnLFxuXHQgICAgICAgICAgICAgICAgICAgIHsgaHJlZjogdGhpcy5wcm9wcy5saW5rIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgaW1hZ2Vcblx0ICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NsaW1iX190aWxlX19jb250ZW50JyB9LFxuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Vcblx0ICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfQXV0aG9yMlsnZGVmYXVsdCddLCBhdXRob3IpLFxuXHQgICAgICAgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjbGltYl9fdGlsZV9faW50ZXJhY3Rpb24nIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25cblx0ICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIFRpbGU7XG5cdH0pKF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXHRcblx0VGlsZS5wcm9wVHlwZXMgPSB7XG5cdFxuXHQgICAgLy8gUmVxdWlyZWQgYXR0cnNcblx0ICAgIGxpbms6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdCAgICBzb3VyY2VfdHlwZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0ICAgIHRpbWVzdGFtcDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblx0ICAgIGF1dGhvcjogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zaGFwZSh7XG5cdCAgICAgICAgdXNlcm5hbWU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdCAgICAgICAgcGljdHVyZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0ICAgICAgICBsaW5rOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG5cdCAgICB9KSxcblx0XG5cdCAgICAvLyBPcHRpb25hbCBhdHRyc1xuXHQgICAgbWVzc2FnZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgICB2aWRlb19zcmM6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc3RyaW5nLFxuXHQgICAgaW1hZ2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMuc2hhcGUoe1xuXHQgICAgICAgIHVybDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0ICAgICAgICB3aWR0aDogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblx0ICAgICAgICBoZWlnaHQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcblx0ICAgIH0pXG5cdFxuXHR9O1xuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gVGlsZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXHRcblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IGRlc2MgPSBwYXJlbnQgPSBnZXR0ZXIgPSB1bmRlZmluZWQ7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfdXRpbHNDbGltYiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdFxuXHR2YXIgX3V0aWxzQ2xpbWIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbHNDbGltYik7XG5cdFxuXHR2YXIgX1RpbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0dmFyIF9UaWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RpbGUpO1xuXHRcblx0dmFyIFdhbGwgPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhXYWxsLCBfUmVhY3QkQ29tcG9uZW50KTtcblx0XG5cdCAgICBmdW5jdGlvbiBXYWxsKHByb3BzKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdhbGwpO1xuXHRcblx0ICAgICAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihXYWxsLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcywgcHJvcHMpO1xuXHQgICAgICAgIHRoaXMuc3RhdGUgPSB7XG5cdCAgICAgICAgICAgIGl0ZW1zOiBbXVxuXHQgICAgICAgIH07XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKFdhbGwsIFt7XG5cdCAgICAgICAga2V5OiAnaW5pdCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG5cdCAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuY29sbGVjdGlvbklkKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIF91dGlsc0NsaW1iMlsnZGVmYXVsdCddLmdldEZlZWQodGhpcy5wcm9wcy5jb2xsZWN0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKGl0ZW1zKSB7XG5cdCAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbXM6IGl0ZW1zXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG5cdCAgICAgICAgICAgIHZhciBjYiA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgICAgaWYgKHdpbmRvdy5DbGltYiAmJiB3aW5kb3cuQ2xpbWIub25VcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIGNiID0gd2luZG93LkNsaW1iLm9uVXBkYXRlO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gbm9vcFxuXHQgICAgICAgICAgICAgICAgY2IgPSBmdW5jdGlvbiAoKSB7fTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjYigpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHZhciB0aWxlcyA9IFtdO1xuXHQgICAgICAgICAgICB0aGlzLnN0YXRlLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBXaGF0J3Mgd2l0aCB0aGUgYC4uLmA/XG5cdCAgICAgICAgICAgICAgICAvLyBJdCdzIEVTNi5cblx0ICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdHJhbnNmZXJyaW5nLXByb3BzLmh0bWwjdHJhbnNmZXJyaW5nLXdpdGgtLi4uLWluLWpzeFxuXHQgICAgICAgICAgICAgICAgdmFyIGlkID0gaXRlbS5pZDtcblx0XG5cdCAgICAgICAgICAgICAgICB2YXIgb3RoZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhpdGVtLCBbJ2lkJ10pO1xuXHRcblx0ICAgICAgICAgICAgICAgIHRpbGVzLnB1c2goX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1RpbGUyWydkZWZhdWx0J10sIF9leHRlbmRzKHsgcmVmOiBpZCxcblx0ICAgICAgICAgICAgICAgICAgICBrZXk6IGlkXG5cdCAgICAgICAgICAgICAgICB9LCBvdGhlclByb3BzKSkpO1xuXHQgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjbGltYl9fd2FsbCcgfSxcblx0ICAgICAgICAgICAgICAgIHRpbGVzXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBXYWxsO1xuXHR9KShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblx0XG5cdFdhbGwuZGlzcGxheU5hbWUgPSAnV2FsbCc7XG5cdFdhbGwucHJvcFR5cGVzID0ge1xuXHQgICAgY29sbGVjdGlvbklkOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHQgICAgbGltaXQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyXG5cdH07XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBXYWxsO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVkIGJ5IG1pY2hlbGUgb24gMjMvMDkvMTUuXG5cdCAqL1xuXHRcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cdFxuXHR2YXIgX2ZldGNoSnNvbnAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHRcblx0dmFyIF9mZXRjaEpzb25wMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZldGNoSnNvbnApO1xuXHRcblx0dmFyIGdldEZlZWQgPSBmdW5jdGlvbiBnZXRGZWVkKGNvbGxlY3Rpb25JZCkge1xuXHQgICAgcmV0dXJuICgwLCBfZmV0Y2hKc29ucDJbJ2RlZmF1bHQnXSkoJ2h0dHA6Ly9hcHAuY2xpbWIuc29jaWFsL2FwaS92MS9jb2xsZWN0aW9ucy8nICsgY29sbGVjdGlvbklkKS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG5cdCAgICAgICAgcmV0dXJuIHJlc3AuanNvbigpO1xuXHQgICAgfSk7XG5cdH07XG5cdFxuXHR2YXIgY2xpbWIgPSB7XG5cdCAgICBnZXRGZWVkOiBnZXRGZWVkXG5cdH07XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBjbGltYjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHQgIGlmICh0cnVlKSB7XG5cdCAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbZXhwb3J0cywgbW9kdWxlXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID8gKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIGZhY3RvcnkoZXhwb3J0cywgbW9kdWxlKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIG1vZCA9IHtcblx0ICAgICAgZXhwb3J0czoge31cblx0ICAgIH07XG5cdCAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBtb2QpO1xuXHQgICAgZ2xvYmFsLmZldGNoSnNvbnAgPSBtb2QuZXhwb3J0cztcblx0ICB9XG5cdH0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBtb2R1bGUpIHtcblx0ICAndXNlIHN0cmljdCc7XG5cdFxuXHQgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcblx0ICAgIHRpbWVvdXQ6IDUwMDAsXG5cdCAgICBqc29ucENhbGxiYWNrOiAnY2FsbGJhY2snXG5cdCAgfTtcblx0XG5cdCAgZnVuY3Rpb24gZ2VuZXJhdGVDYWxsYmFja0Z1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuICdqc29ucF8nICsgRGF0ZS5ub3coKSArICdfJyArIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwKTtcblx0ICB9XG5cdFxuXHQgIC8vIEtub3duIGlzc3VlOiBXaWxsIHRocm93ICdVbmNhdWdodCBSZWZlcmVuY2VFcnJvcjogY2FsbGJhY2tfKioqIGlzIG5vdCBkZWZpbmVkJyBlcnJvciBpZiByZXF1ZXN0IHRpbWVvdXRcblx0ICBmdW5jdGlvbiBjbGVhckZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSkge1xuXHQgICAgLy8gSUU4IHRocm93cyBhbiBleGNlcHRpb24gd2hlbiB5b3UgdHJ5IHRvIGRlbGV0ZSBhIHByb3BlcnR5IG9uIHdpbmRvd1xuXHQgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTgyNDIyOC83NTEwODlcblx0ICAgIHRyeSB7XG5cdCAgICAgIGRlbGV0ZSB3aW5kb3dbZnVuY3Rpb25OYW1lXTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgd2luZG93W2Z1bmN0aW9uTmFtZV0gPSB1bmRlZmluZWQ7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZW1vdmVTY3JpcHQoc2NyaXB0SWQpIHtcblx0ICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzY3JpcHRJZCk7XG5cdCAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0ucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0ICB9XG5cdFxuXHQgIHZhciBmZXRjaEpzb25wID0gZnVuY3Rpb24gZmV0Y2hKc29ucCh1cmwpIHtcblx0ICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cdFxuXHQgICAgdmFyIHRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgIT0gbnVsbCA/IG9wdGlvbnMudGltZW91dCA6IGRlZmF1bHRPcHRpb25zLnRpbWVvdXQ7XG5cdCAgICB2YXIganNvbnBDYWxsYmFjayA9IG9wdGlvbnMuanNvbnBDYWxsYmFjayAhPSBudWxsID8gb3B0aW9ucy5qc29ucENhbGxiYWNrIDogZGVmYXVsdE9wdGlvbnMuanNvbnBDYWxsYmFjaztcblx0XG5cdCAgICB2YXIgdGltZW91dElkID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgIHZhciBjYWxsYmFja0Z1bmN0aW9uID0gZ2VuZXJhdGVDYWxsYmFja0Z1bmN0aW9uKCk7XG5cdFxuXHQgICAgICB3aW5kb3dbY2FsbGJhY2tGdW5jdGlvbl0gPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgICAgICByZXNvbHZlKHtcblx0ICAgICAgICAgIG9rOiB0cnVlLFxuXHQgICAgICAgICAgLy8ga2VlcCBjb25zaXN0ZW50IHdpdGggZmV0Y2ggQVBJXG5cdCAgICAgICAgICBqc29uOiBmdW5jdGlvbiBqc29uKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgaWYgKHRpbWVvdXRJZCkgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG5cdFxuXHQgICAgICAgIHJlbW92ZVNjcmlwdChqc29ucENhbGxiYWNrICsgJ18nICsgY2FsbGJhY2tGdW5jdGlvbik7XG5cdFxuXHQgICAgICAgIGNsZWFyRnVuY3Rpb24oY2FsbGJhY2tGdW5jdGlvbik7XG5cdCAgICAgIH07XG5cdFxuXHQgICAgICAvLyBDaGVjayBpZiB0aGUgdXNlciBzZXQgdGhlaXIgb3duIHBhcmFtcywgYW5kIGlmIG5vdCBhZGQgYSA/IHRvIHN0YXJ0IGEgbGlzdCBvZiBwYXJhbXNcblx0ICAgICAgdXJsICs9IHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnO1xuXHRcblx0ICAgICAgdmFyIGpzb25wU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cdCAgICAgIGpzb25wU2NyaXB0LnNldEF0dHJpYnV0ZShcInNyY1wiLCB1cmwgKyBqc29ucENhbGxiYWNrICsgJz0nICsgY2FsbGJhY2tGdW5jdGlvbik7XG5cdCAgICAgIGpzb25wU2NyaXB0LmlkID0ganNvbnBDYWxsYmFjayArICdfJyArIGNhbGxiYWNrRnVuY3Rpb247XG5cdCAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXS5hcHBlbmRDaGlsZChqc29ucFNjcmlwdCk7XG5cdFxuXHQgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZWplY3QobmV3IEVycm9yKCdKU09OUCByZXF1ZXN0IHRvICcgKyB1cmwgKyAnIHRpbWVkIG91dCcpKTtcblx0XG5cdCAgICAgICAgY2xlYXJGdW5jdGlvbihjYWxsYmFja0Z1bmN0aW9uKTtcblx0ICAgICAgICByZW1vdmVTY3JpcHQoanNvbnBDYWxsYmFjayArICdfJyArIGNhbGxiYWNrRnVuY3Rpb24pO1xuXHQgICAgICB9LCB0aW1lb3V0KTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIC8vIGV4cG9ydCBhcyBnbG9iYWwgZnVuY3Rpb25cblx0ICAvKlxuXHQgIGxldCBsb2NhbDtcblx0ICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIGxvY2FsID0gZ2xvYmFsO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBsb2NhbCA9IHNlbGY7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgXG5cdCAgbG9jYWwuZmV0Y2hKc29ucCA9IGZldGNoSnNvbnA7XG5cdCAgKi9cblx0XG5cdCAgbW9kdWxlLmV4cG9ydHMgPSBmZXRjaEpzb25wO1xuXHR9KTtcblxuLyoqKi8gfVxuLyoqKioqKi8gXSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogcmVhY3QtY2xpbWItc29jaWFsLmpzXG4gKiovIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgYTI2ZjIwNDhjYzY1Y2UwMzk3N2NcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFdhbGwgZnJvbSAnLi9jb21wb25lbnRzL1dhbGwuanN4JztcblxuaWYgKHdpbmRvdykge1xuICAgIHdpbmRvdy5DbGltYiA9IHdpbmRvdy5DbGltYiB8fCB7fTtcblxuICAgIGNvbnN0ICR0YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNsaW1iLXdhbGwnKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgJHRhcmdldHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgJGl0ZW0gPSAkdGFyZ2V0c1tpXTtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbklkID0gJGl0ZW0uZGF0YXNldC5jb2xsZWN0aW9uSWQ7XG4gICAgICAgIGNvbnN0IGxpbWl0ID0gJGl0ZW0uZGF0YXNldC5saW1pdDtcblxuICAgICAgICBSZWFjdC5yZW5kZXIoXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFdhbGwsIHtjb2xsZWN0aW9uSWQsIGxpbWl0fSksICRpdGVtXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBXYWxsO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2VzbGludC1sb2FkZXIhLi9zcmMvaW5kZXguanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZXh0ZXJuYWwgXCJSZWFjdFwiXG4gKiogbW9kdWxlIGlkID0gMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuXG5jbGFzcyBBdXRob3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjbGltYl9fdGlsZV9fYXV0aG9yXCJcbiAgICAgICAgICAgICAgIGhyZWY9eyB0aGlzLnByb3BzLmxpbmsgfT5cblxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPXsgdGhpcy5wcm9wcy5waWN0dXJlfVxuICAgICAgICAgICAgICAgICAgICAgYWx0PXsgYFByb2ZpbGUgcGljIG9mICR7dGhpcy5wcm9wcy5uYW1lfWAgfS8+XG5cbiAgICAgICAgICAgICAgICA8aDQgY2xhc3NOYW1lPVwiY2xpbWJfX3RpbGVfX2F1dGhvcl9fdXNlcm5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgeyB0aGlzLnByb3BzLnVzZXJuYW1lIH1cbiAgICAgICAgICAgICAgICA8L2g0PlxuXG4gICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cImNsaW1iX190aWxlX19hdXRob3JfX2ZvbGxvd2Vyc1wiPlxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMucHJvcHMuZm9sbG93ZXJzX2NvdW50IH1cbiAgICAgICAgICAgICAgICA8L2g0PlxuXG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5BdXRob3IucHJvcFR5cGVzID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IEF1dGhvcjtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vfi9lc2xpbnQtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvQXV0aG9yLmpzeFxuICoqLyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cblxuY2xhc3MgSW1hZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJjbGltYl9fdGlsZV9faW1hZ2VcIlxuICAgICAgICAgICAgICAgICBzcmM9eyB0aGlzLnByb3BzLnNyYyB9IGRhdGEtd2lkdGg9eyB0aGlzLnByb3BzLndpZHRoIH0gZGF0YS1oZWlnaHQ9eyB0aGlzLnByb3BzLmhlaWdodCB9Lz5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkltYWdlLnByb3BUeXBlcyA9IHtcbiAgICBzcmM6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB3aWR0aDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBoZWlnaHQ6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2VzbGludC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9JbWFnZS5qc3hcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5cbmNsYXNzIEludGVyYWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHVsPjwvdWw+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5JbnRlcmFjdGlvbi5wcm9wVHlwZXMgPSB7XG4gICAgYm9keTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmFjdGlvbjtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vfi9lc2xpbnQtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvSW50ZXJhY3Rpb24uanN4XG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuXG5jbGFzcyBNZXNzYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xpbWJfX3RpbGVfX21lc3NhZ2VcIlxuICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogdGhpcy5wcm9wcy5ib2R5fX0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbk1lc3NhZ2UucHJvcFR5cGVzID0ge1xuICAgIGJvZHk6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vfi9lc2xpbnQtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvTWVzc2FnZS5qc3hcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEltYWdlIGZyb20gJy4vSW1hZ2UnO1xuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnLi9NZXNzYWdlJztcbmltcG9ydCBBdXRob3IgZnJvbSAnLi9BdXRob3InO1xuaW1wb3J0IEludGVyYWN0aW9uIGZyb20gJy4vSW50ZXJhY3Rpb24nO1xuXG5cbmNsYXNzIFRpbGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLmNyZWF0ZUltYWdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuY3JlYXRlTWVzc2FnZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNyZWF0ZUludGVyYWN0aW9uLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuY3JlYXRlQ2xhc3NTdHJpbmcuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjcmVhdGVJbWFnZSgpIHtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5pbWFnZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3Qge3VybDogc3JjLCB3aWR0aCwgaGVpZ2h0fSA9IHRoaXMucHJvcHMuaW1hZ2U7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxJbWFnZSBzcmM9eyBzcmMgfVxuICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD17IHdpZHRoIH1cbiAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXsgaGVpZ2h0IH0vPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjcmVhdGVNZXNzYWdlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPE1lc3NhZ2UgYm9keT17IHRoaXMucHJvcHMubWVzc2FnZSB9Lz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY3JlYXRlSW50ZXJhY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmxpbmspIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEludGVyYWN0aW9uIGJvZHk9eyB0aGlzLnByb3BzIH0vPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cblxuICAgIGNyZWF0ZUNsYXNzU3RyaW5nKCkge1xuXG4gICAgICAgIGxldCBjbGFzc1N0cmluZyA9IGBjbGltYl9fdGlsZSBjbGltYl9fdGlsZS0tJHt0aGlzLnByb3BzLnNvdXJjZV90eXBlfWA7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaW1hZ2UpIHtcbiAgICAgICAgICAgIGNsYXNzU3RyaW5nICs9ICcgY2xpbWJfX3RpbGUtLWhhcy1tZWRpYSBjbGltYl9fdGlsZS0taGFzLWltYWdlJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnZpZGVvX3VybCkge1xuICAgICAgICAgICAgY2xhc3NTdHJpbmcgKz0gJyBjbGltYl9fdGlsZS0taGFzLW1lZGlhIGNsaW1iX190aWxlLS1oYXMtdmlkZW8nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsYXNzU3RyaW5nO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBjb25zdCBpbWFnZSA9IHRoaXMuY3JlYXRlSW1hZ2UoKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRoaXMuY3JlYXRlTWVzc2FnZSgpO1xuICAgICAgICBjb25zdCBpbnRlcmFjdGlvbiA9IHRoaXMuY3JlYXRlSW50ZXJhY3Rpb24oKTtcbiAgICAgICAgY29uc3QgY2xhc3NTdHJpbmcgPSB0aGlzLmNyZWF0ZUNsYXNzU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IHthdXRob3J9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9eyBjbGFzc1N0cmluZyB9PlxuXG4gICAgICAgICAgICAgICAgPGEgaHJlZj17IHRoaXMucHJvcHMubGluayB9PlxuICAgICAgICAgICAgICAgICAgICB7IGltYWdlIH1cbiAgICAgICAgICAgICAgICA8L2E+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNsaW1iX190aWxlX19jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIHsgbWVzc2FnZSB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8QXV0aG9yIHsuLi5hdXRob3J9IC8+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNsaW1iX190aWxlX19pbnRlcmFjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICB7IGludGVyYWN0aW9uIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblRpbGUucHJvcFR5cGVzID0ge1xuXG4gICAgLy8gUmVxdWlyZWQgYXR0cnNcbiAgICBsaW5rOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc291cmNlX3R5cGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0aW1lc3RhbXA6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBhdXRob3I6IFJlYWN0LlByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIHVzZXJuYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIHBpY3R1cmU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgbGluazogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH0pLFxuXG4gICAgLy8gT3B0aW9uYWwgYXR0cnNcbiAgICBtZXNzYWdlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHZpZGVvX3NyYzogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbWFnZTogUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgdXJsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIHdpZHRoOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgICAgIGhlaWdodDogUmVhY3QuUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIH0pXG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRpbGU7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vZXNsaW50LWxvYWRlciEuL3NyYy9jb21wb25lbnRzL1RpbGUuanN4XG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGltYiBmcm9tICcuLi91dGlscy9jbGltYic7XG5pbXBvcnQgVGlsZSBmcm9tICcuL1RpbGUnO1xuXG5cbmNsYXNzIFdhbGwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgaXRlbXM6IFtdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcblxuICAgICAgICBpZiAoIXRoaXMucHJvcHMuY29sbGVjdGlvbklkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjbGltYlxuICAgICAgICAgICAgLmdldEZlZWQodGhpcy5wcm9wcy5jb2xsZWN0aW9uSWQpXG4gICAgICAgICAgICAudGhlbigoaXRlbXMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIGxldCBjYjtcbiAgICAgICAgaWYgKHdpbmRvdy5DbGltYiAmJiB3aW5kb3cuQ2xpbWIub25VcGRhdGUpIHtcbiAgICAgICAgICAgIGNiID0gd2luZG93LkNsaW1iLm9uVXBkYXRlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICAgICAgY2IgPSAoKSA9PiB7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNiKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB0aWxlcyA9IFtdO1xuICAgICAgICB0aGlzLnN0YXRlLml0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG5cbiAgICAgICAgICAgIC8vIFdoYXQncyB3aXRoIHRoZSBgLi4uYD9cbiAgICAgICAgICAgIC8vIEl0J3MgRVM2LlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90cmFuc2ZlcnJpbmctcHJvcHMuaHRtbCN0cmFuc2ZlcnJpbmctd2l0aC0uLi4taW4tanN4XG4gICAgICAgICAgICBjb25zdCB7aWQsIC4uLm90aGVyUHJvcHN9ID0gaXRlbTtcblxuICAgICAgICAgICAgdGlsZXMucHVzaChcbiAgICAgICAgICAgICAgICA8VGlsZSByZWY9eyBpZCB9XG4gICAgICAgICAgICAgICAgICAgICAga2V5PXsgaWQgfVxuICAgICAgICAgICAgICAgICAgICB7Li4ub3RoZXJQcm9wcyB9IC8+XG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjbGltYl9fd2FsbFwiPlxuICAgICAgICAgICAgICAgIHsgdGlsZXMgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5XYWxsLmRpc3BsYXlOYW1lID0gJ1dhbGwnO1xuV2FsbC5wcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbklkOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgbGltaXQ6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdhbGw7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vZXNsaW50LWxvYWRlciEuL3NyYy9jb21wb25lbnRzL1dhbGwuanN4XG4gKiovIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IG1pY2hlbGUgb24gMjMvMDkvMTUuXG4gKi9cblxuaW1wb3J0IGZldGNoSnNvbnAgZnJvbSAnZmV0Y2gtanNvbnAnO1xuXG5jb25zdCBnZXRGZWVkID0gKGNvbGxlY3Rpb25JZCkgPT4ge1xuICAgIHJldHVybiBmZXRjaEpzb25wKGBodHRwOi8vYXBwLmNsaW1iLnNvY2lhbC9hcGkvdjEvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uSWR9YClcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcC5qc29uKCk7XG4gICAgICAgIH0pO1xufTtcblxuY29uc3QgY2xpbWIgPSB7XG4gICAgZ2V0RmVlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xpbWI7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vZXNsaW50LWxvYWRlciEuL3NyYy91dGlscy9jbGltYi5qc1xuICoqLyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ21vZHVsZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIG1vZHVsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBtb2QpO1xuICAgIGdsb2JhbC5mZXRjaEpzb25wID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBtb2R1bGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICB0aW1lb3V0OiA1MDAwLFxuICAgIGpzb25wQ2FsbGJhY2s6ICdjYWxsYmFjaydcbiAgfTtcblxuICBmdW5jdGlvbiBnZW5lcmF0ZUNhbGxiYWNrRnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdqc29ucF8nICsgRGF0ZS5ub3coKSArICdfJyArIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwKTtcbiAgfVxuXG4gIC8vIEtub3duIGlzc3VlOiBXaWxsIHRocm93ICdVbmNhdWdodCBSZWZlcmVuY2VFcnJvcjogY2FsbGJhY2tfKioqIGlzIG5vdCBkZWZpbmVkJyBlcnJvciBpZiByZXF1ZXN0IHRpbWVvdXRcbiAgZnVuY3Rpb24gY2xlYXJGdW5jdGlvbihmdW5jdGlvbk5hbWUpIHtcbiAgICAvLyBJRTggdGhyb3dzIGFuIGV4Y2VwdGlvbiB3aGVuIHlvdSB0cnkgdG8gZGVsZXRlIGEgcHJvcGVydHkgb24gd2luZG93XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTgyNDIyOC83NTEwODlcbiAgICB0cnkge1xuICAgICAgZGVsZXRlIHdpbmRvd1tmdW5jdGlvbk5hbWVdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHdpbmRvd1tmdW5jdGlvbk5hbWVdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVNjcmlwdChzY3JpcHRJZCkge1xuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzY3JpcHRJZCk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gIH1cblxuICB2YXIgZmV0Y2hKc29ucCA9IGZ1bmN0aW9uIGZldGNoSnNvbnAodXJsKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcblxuICAgIHZhciB0aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0ICE9IG51bGwgPyBvcHRpb25zLnRpbWVvdXQgOiBkZWZhdWx0T3B0aW9ucy50aW1lb3V0O1xuICAgIHZhciBqc29ucENhbGxiYWNrID0gb3B0aW9ucy5qc29ucENhbGxiYWNrICE9IG51bGwgPyBvcHRpb25zLmpzb25wQ2FsbGJhY2sgOiBkZWZhdWx0T3B0aW9ucy5qc29ucENhbGxiYWNrO1xuXG4gICAgdmFyIHRpbWVvdXRJZCA9IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgY2FsbGJhY2tGdW5jdGlvbiA9IGdlbmVyYXRlQ2FsbGJhY2tGdW5jdGlvbigpO1xuXG4gICAgICB3aW5kb3dbY2FsbGJhY2tGdW5jdGlvbl0gPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAgLy8ga2VlcCBjb25zaXN0ZW50IHdpdGggZmV0Y2ggQVBJXG4gICAgICAgICAganNvbjogZnVuY3Rpb24ganNvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRpbWVvdXRJZCkgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG5cbiAgICAgICAgcmVtb3ZlU2NyaXB0KGpzb25wQ2FsbGJhY2sgKyAnXycgKyBjYWxsYmFja0Z1bmN0aW9uKTtcblxuICAgICAgICBjbGVhckZ1bmN0aW9uKGNhbGxiYWNrRnVuY3Rpb24pO1xuICAgICAgfTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHVzZXIgc2V0IHRoZWlyIG93biBwYXJhbXMsIGFuZCBpZiBub3QgYWRkIGEgPyB0byBzdGFydCBhIGxpc3Qgb2YgcGFyYW1zXG4gICAgICB1cmwgKz0gdXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJic7XG5cbiAgICAgIHZhciBqc29ucFNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAganNvbnBTY3JpcHQuc2V0QXR0cmlidXRlKFwic3JjXCIsIHVybCArIGpzb25wQ2FsbGJhY2sgKyAnPScgKyBjYWxsYmFja0Z1bmN0aW9uKTtcbiAgICAgIGpzb25wU2NyaXB0LmlkID0ganNvbnBDYWxsYmFjayArICdfJyArIGNhbGxiYWNrRnVuY3Rpb247XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQoanNvbnBTY3JpcHQpO1xuXG4gICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignSlNPTlAgcmVxdWVzdCB0byAnICsgdXJsICsgJyB0aW1lZCBvdXQnKSk7XG5cbiAgICAgICAgY2xlYXJGdW5jdGlvbihjYWxsYmFja0Z1bmN0aW9uKTtcbiAgICAgICAgcmVtb3ZlU2NyaXB0KGpzb25wQ2FsbGJhY2sgKyAnXycgKyBjYWxsYmFja0Z1bmN0aW9uKTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIGV4cG9ydCBhcyBnbG9iYWwgZnVuY3Rpb25cbiAgLypcbiAgbGV0IGxvY2FsO1xuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsb2NhbCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsb2NhbCA9IHNlbGY7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgIH1cbiAgfVxuICBcbiAgbG9jYWwuZmV0Y2hKc29ucCA9IGZldGNoSnNvbnA7XG4gICovXG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmZXRjaEpzb25wO1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vZmV0Y2gtanNvbnAvYnVpbGQvZmV0Y2gtanNvbnAuanNcbiAqKiBtb2R1bGUgaWQgPSA5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9