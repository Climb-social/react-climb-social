!function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var r={};return t.m=e,t.c=r,t.p="/",t(0)}([function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var o=r(2),i=n(o);i["default"].start()},function(e,t){e.exports=React},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(1),i=n(o),u=r(8),a=n(u),l={start:function(){i["default"].render(i["default"].createElement(a["default"],{collectionId:"55a7d29945284ef60c0ce772"}),document.getElementById("app"))}};t["default"]=l,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},l=r(1),c=n(l),s=function(e){function t(){o(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("a",{className:"climb__tile__author",href:this.props.link},c["default"].createElement("img",{src:this.props.picture,alt:"Profile pic of "+this.props.name}),c["default"].createElement("h4",{className:"climb__tile__author__username"},this.props.username),c["default"].createElement("h4",{className:"climb__tile__author__followers"},this.props.followers_count))}}]),t}(c["default"].Component);s.propTypes={},t["default"]=s,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},l=r(1),c=n(l),s=function(e){function t(){o(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("img",{className:"climb__tile__image",src:this.props.src,"data-width":this.props.width,"data-height":this.props.height})}}]),t}(c["default"].Component);s.propTypes={src:c["default"].PropTypes.string.isRequired,width:c["default"].PropTypes.number,height:c["default"].PropTypes.number},t["default"]=s,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},l=r(1),c=n(l),s=function(e){function t(){o(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("ul",null)}}]),t}(c["default"].Component);s.propTypes={body:c["default"].PropTypes.string.isRequired},t["default"]=s,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},l=r(1),c=n(l),s=function(e){function t(){o(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("div",{className:"climb__tile__message",dangerouslySetInnerHTML:{__html:this.props.body}})}}]),t}(c["default"].Component);s.propTypes={body:c["default"].PropTypes.string.isRequired},t["default"]=s,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},l=r(1),c=n(l),s=r(4),f=n(s),p=r(6),d=n(p),y=r(3),v=n(y),m=r(5),b=n(m),h=function(e){function t(e){o(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.createImage.bind(this),this.createMessage.bind(this),this.createInteraction.bind(this),this.createClassString.bind(this)}return i(t,e),u(t,[{key:"createImage",value:function(){if(null!==this.props.image){var e=this.props.image,t=e.url,r=e.width,n=e.height;return c["default"].createElement(f["default"],{src:t,width:r,height:n})}return null}},{key:"createMessage",value:function(){return this.props.message?c["default"].createElement(d["default"],{body:this.props.message}):null}},{key:"createInteraction",value:function(){return this.props.link?c["default"].createElement(b["default"],{body:this.props}):null}},{key:"createClassString",value:function(){var e="climb__tile climb__tile--"+this.props.source_type;return this.props.image&&(e+=" climb__tile--has-media climb__tile--has-image"),this.props.video_url&&(e+=" climb__tile--has-media climb__tile--has-video"),e}},{key:"render",value:function(){var e=this.createImage(),t=this.createMessage(),r=this.createInteraction(),n=this.createClassString(),o=this.props.author;return c["default"].createElement("div",{className:n},c["default"].createElement("a",{href:this.props.link},e),c["default"].createElement("div",{className:"climb__tile__content"},t),c["default"].createElement(v["default"],o),c["default"].createElement("div",{className:"climb__tile__interaction"},r))}}]),t}(c["default"].Component);h.propTypes={link:c["default"].PropTypes.string.isRequired,source_type:c["default"].PropTypes.string.isRequired,timestamp:c["default"].PropTypes.number.isRequired,author:c["default"].PropTypes.shape({username:c["default"].PropTypes.string.isRequired,picture:c["default"].PropTypes.string.isRequired,link:c["default"].PropTypes.string.isRequired}),message:c["default"].PropTypes.string,video_src:c["default"].PropTypes.string,image:c["default"].PropTypes.shape({url:c["default"].PropTypes.string.isRequired,width:c["default"].PropTypes.number.isRequired,height:c["default"].PropTypes.number.isRequired})},t["default"]=h,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},l=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),c=function(e,t,r){for(var n=!0;n;){var o=e,i=t,u=r;a=c=l=void 0,n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,i);if(void 0!==a){if("value"in a)return a.value;var l=a.get;return void 0===l?void 0:l.call(u)}var c=Object.getPrototypeOf(o);if(null===c)return void 0;e=c,t=i,r=u,n=!0}},s=r(1),f=n(s),p=r(9),d=n(p),y=r(7),v=n(y),m=function(e){function t(e){i(this,t),c(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.state={items:[]}}return u(t,e),l(t,[{key:"init",value:function(){var e=this;d["default"].getFeed(this.props.collectionId).then(function(t){e.setState({items:t})})}},{key:"componentDidMount",value:function(){this.init()}},{key:"componentDidUpdate",value:function(){var e=void 0;(e=window.climb&&window.climb.initCallback?window.climb.initCallback:function(){})()}},{key:"render",value:function(){window.console.log("rendering wall");var e=[];return this.state.items.forEach(function(t){var r=t.id,n=o(t,["id"]);e.push(f["default"].createElement(v["default"],a({ref:r,key:r},n)))}),f["default"].createElement("div",{className:"climb__wall"},e)}}]),t}(f["default"].Component);m.propTypes={collectionId:f["default"].PropTypes.string.isRequired,limit:f["default"].PropTypes.number},t["default"]=m,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(10),i=n(o),u=function(e){return i["default"]("http://app.climb.social/api/v1/collections/"+e).then(function(e){return e.json()})},a={getFeed:u};t["default"]=a,e.exports=t["default"]},function(e,t,r){var n,o,i;!function(r,u){o=[t,e],n=u,i="function"==typeof n?n.apply(t,o):n,!(void 0!==i&&(e.exports=i))}(this,function(e,t){"use strict";function r(){return"jsonp_"+Date.now()+"_"+Math.ceil(1e5*Math.random())}function n(e){try{delete window[e]}catch(t){window[e]=void 0}}function o(e){var t=document.getElementById(e);document.getElementsByTagName("head")[0].removeChild(t)}var i={timeout:5e3,jsonpCallback:"callback"},u=function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],u=null!=t.timeout?t.timeout:i.timeout,a=null!=t.jsonpCallback?t.jsonpCallback:i.jsonpCallback,l=void 0;return new Promise(function(t,i){var c=r();window[c]=function(e){t({ok:!0,json:function(){return Promise.resolve(e)}}),l&&clearTimeout(l),o(a+"_"+c),n(c)},e+=-1===e.indexOf("?")?"?":"&";var s=document.createElement("script");s.setAttribute("src",e+a+"="+c),s.id=a+"_"+c,document.getElementsByTagName("head")[0].appendChild(s),l=setTimeout(function(){i(new Error("JSONP request to "+e+" timed out")),n(c),o(a+"_"+c)},u)})};t.exports=u})}]);
//# sourceMappingURL=data:application/json;base64,